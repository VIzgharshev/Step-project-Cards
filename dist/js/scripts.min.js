"use strict";function _get(){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=_superPropBase(e,t);if(r)return(r=Object.getOwnPropertyDescriptor(r,t)).get?r.get.call(arguments.length<3?e:n):r.value}).apply(this,arguments)}function _superPropBase(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=_getPrototypeOf(e)););return e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(n){var r=_isNativeReflectConstruct();return function(){var e,t=_getPrototypeOf(n);return e=r?(e=_getPrototypeOf(this).constructor,Reflect.construct(t,arguments,e)):t.apply(this,arguments),_possibleConstructorReturn(this,e)}}function _possibleConstructorReturn(e,t){if(t&&("object"===_typeof(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(e)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,_toPropertyKey(r.key),r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function _toPropertyKey(e){e=_toPrimitive(e,"string");return"symbol"===_typeof(e)?e:String(e)}function _toPrimitive(e,t){if("object"!==_typeof(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0===n)return("string"===t?String:Number)(e);n=n.call(e,t||"default");if("object"!==_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}var Visit=function(){function t(e){_classCallCheck(this,t),this.doctor=null,this.doctorLabel=null,e?(this.id=e.id,this.title=e.title,this.description=e.description,this.urgency=e.urgency,this.patientName=e.patientName,this.visit=e.visit):(this.collectDataFromInputs(document),this.visit="open")}return _createClass(t,[{key:"getOptionalInputs",value:function(){return""}},{key:"getOptionalInputsInfo",value:function(){return""}},{key:"collectDataFromInputs",value:function(e){this.patientName=e.querySelector("#patient_name").value,this.description=e.querySelector("#visit-propose").value,this.title=e.querySelector("#short-text").value,this.urgency=e.querySelector("#urgently").value;e=e.querySelector("#visit");e&&(this.visit=e.value)}},{key:"showInfoModal",value:function(t){t.innerHTML='\n                  <div class="modal-login container-fluid p-0 vh-100 position-fixed top-0 start-0 bg-black bg-opacity-25"\n        style="backdrop-filter: blur(3px); overflow: hidden;" id="modal-login">\n       <div class="main-section__new-visit information_modal-login  container-sm bg-white position-absolute top-50 start-50 translate-middle p-4"\n          >\n           <div class="information_wrapper">\n           <h2 class="main-section__see_all-info-header-text">Iнфорамція візита</h2>\n           <div>\n               <h5 class="main-section__see-all-inf-header">Лікар: <span class="main-section__see-all-inf-span">'.concat(this.doctorLabel,'</span></h5>\n               <h5 class="main-section__see-all-inf-header">ПІБ пацієнта: <span class="main-section__see-all-inf-span">').concat(this.patientName,'</span></h5>\n               <h5 class="main-section__see-all-inf-header">Ціль візита: <span class="main-section__see-all-inf-span">').concat(this.description,'</span></h5>\n               <h5 class="main-section__see-all-inf-header">Короткі замітки: <span class="main-section__see-all-inf-span">').concat(this.title,'</span></h5>\n               <h5 class="main-section__see-all-inf-header">Терміновість візита: <span class="main-section__see-all-inf-span">').concat(this.urgency,"</span></h5>\n               ").concat(this.getOptionalInputsInfo(),'\n               <h5 class="main-section__see-all-inf-header">Статус: <span class="main-section__see-all-inf-span">').concat(this.visit,'</span></h5>\n           </div>\n           <button type="button" class="modal-login__btn-done btn btn-success" id="close_inform_popup" style="margin-top: 20px">\n               ГОТОВО\n           </button>\n           </div>\n       </div>\n       </div>'),t.querySelector(".modal-login").addEventListener("click",function(e){e.target.classList.contains("modal-login")&&t.remove()}),t.querySelector("#close_inform_popup").addEventListener("click",function(){t.remove()}),document.body.append(t)}},{key:"showEditorModal",value:function(t,n){var r=this;t.classList.add("editing_modal_wrapper"),t.innerHTML='<div class="modal-login container-fluid p-0 vh-100 position-fixed top-0 start-0 bg-black bg-opacity-25" id="editing_madal"\n             style="backdrop-filter: blur(3px); overflow: hidden;">\n            <div\n                class="main-section__new-visit container-sm bg-white position-absolute top-50 start-50 translate-middle p-4"\n               >\n                <h2 style="color: #6BB961; text-decoration: underline; text-align: center" class="edit-visit-header">Редагувати візит</h2>\n                <div class="form-group">\n                    <label for="doctor-type-select" class="form-label">Лікар</label>\n                    <select class="form-control" id="doctor-type-select" style="color: #307570;" disabled>\n                        <option value="cardiolog" '.concat("cardiolog"===this.doctor?"selected":"",'>Кардиолог</option>\n                        <option value="stomatolog" ').concat("stomatolog"===this.doctor?"selected":"",'>Стоматолог</option>\n                        <option value="terapevt" ').concat("terapevt"===this.doctor?"selected":"",'>Терапевт</option>\n                    </select>\n                </div>\n                <form>\n                    <div class="form-group" id="doctors-form">\n                        <div class="col">\n                           <p class="col_paragraph">ПІБ(пацієнта):</p> <input type="text" id="patient_name" class="form-control" placeholder="ПІБ(пацієнта)" value=').concat(this.patientName,' >\n                        </div>\n                        <div class="col">\n                           <p class="col_paragraph">Ціль візита:</p> <input type="text" id="visit-propose" class="form-control" placeholder="Ціль візита" value=').concat(this.description,' >\n                        </div>\n                        <div class="optional-inputs">\n                            ').concat(this.getOptionalInputs(),'\n                        </div>\n                        <div class="col">\n                            <p class="col_paragraph">Короткі замітки:</p><textarea type="text" class="form-control" id="short-text"\n                                      placeholder="Короткі замітки">').concat(this.title,'</textarea>\n                        </div>\n                        <div class="col">\n                            <label for="urgently" class="form-label" style="text-align: center">Терміновість візита</label>\n                            <select class="form-control"  id="urgently" style="color: #307570;">\n                                <option value="High" ').concat("High"===this.urgency?"selected":"",'>High</option>\n                                <option value="Normal" ').concat("Normal"===this.urgency?"selected":"",'>Normal</option>\n                                <option value="Low" ').concat("Low"===this.urgency?"selected":"",'>Low</option>\n                            </select>\n                        </div>\n                              <div class="col">\n                            <label for="visit" style="text-align: center">Статус</label>\n                            <select class="form-control" id="visit" style="color: #307570;">\n                                <option value="close" ').concat("close"===this.visit?"selected":"",'>close</option>\n                                <option value="open" ').concat("open"===this.visit?"selected":"",'>open</option>\n                            </select>\n                        </div>\n                    </div>\n                </form>\n                <div class="main-section__button-container">\n                    <button type="button" class="modal-login__btn-done btn  btn-success" id="close_edit_visit"\n                            style="margin-top: 20px; background-color: #D24B4B;">\n                        Закрити\n                    </button>\n                    <button type="button" class="modal-login__btn-done btn btn-success" id="edit_visit_btn"\n                            style="margin-top: 20px">\n                        Готово\n                    </button>\n                       <button type="button" class="modal-login__btn-done btn btn-success" id="del_card"\n                            style="margin-top: 20px">\n                        Видалити картку\n                    </button>\n                </div>\n            </div>\n        </div>'),t.querySelector("#del_card").addEventListener("click",function(){n.onDelete(),t.remove()}),t.querySelector("#close_edit_visit").addEventListener("click",function(e){t.remove()}),t.querySelector(".modal-login").addEventListener("click",function(e){e.target.classList.contains("modal-login")&&t.remove()}),t.querySelector("#edit_visit_btn").addEventListener("click",function(e){e.preventDefault(),r.collectDataFromInputs(t),n.onEdit(r),t.remove()}),t.querySelector("#urgently").value=this.urgency,document.body.append(t)}}]),t}(),VisitDentist=function(){_inherits(r,Visit);var n=_createSuper(r);function r(e){var t;return _classCallCheck(this,r),(t=n.call(this,e)).doctor="stomatolog",t.doctorLabel="Стоматолог",e&&(t.date=e.date),t}return _createClass(r,[{key:"getOptionalInputs",value:function(){return'\n            <div class="col">\n           <p class="col_paragraph">Дата останнього відвідування:</p> <input type="date" class="form-control" id="date-visit" placeholder="Дата останнього відвідування" value="'.concat(this.date,'">\n            </div>\n        ')}},{key:"getOptionalInputsInfo",value:function(){return'\n            <h5 class="main-section__see-all-inf-header">Дата візитa: <span class="main-section__see-all-inf-span">'.concat(this.date,"</span></h5>\n        ")}},{key:"collectDataFromInputs",value:function(e){_get(_getPrototypeOf(r.prototype),"collectDataFromInputs",this).call(this,e),this.date=e.querySelector("#date-visit").value}}]),r}(),VisitCardiologist=function(){_inherits(r,Visit);var n=_createSuper(r);function r(e){var t;return _classCallCheck(this,r),(t=n.call(this,e)).doctor="cardiolog",t.doctorLabel="Кардиолог",e&&(t.age=e.age,t.normalPressure=e.normalPressure,t.bodyMassIndex=e.bodyMassIndex,t.cardiovascularDisease=e.cardiovascularDisease),t}return _createClass(r,[{key:"getOptionalInputs",value:function(){return'\n            <div class="col">\n               <p class="col_paragraph"> Вік:</p>  <input type="number" class="form-control" id="user-age-cardiolog"  placeholder="Вік" value='.concat(this.age,' >\n            </div>\n             <div class="col">\n               <p class="col_paragraph">Звичайний тиск:</p> <input type="number" class="form-control" id="normal-pressure"\n                    placeholder="Звичайний тиск"  value=').concat(this.normalPressure,'  >\n             </div>\n             <div class="col">\n              <p class="col_paragraph">Індекс маси тіла:</p>    <input type="number" class="form-control" id="body-mass-index"\n                    placeholder="Індекс маси тіла" value=').concat(this.bodyMassIndex,'   >\n             </div>\n             <div class="col">\n             <p class="col_paragraph">Перенесені захворювання серцево-судинної системи:</p> <textarea type="text" class="form-control" id="cardiovascular-disease"\n                      placeholder="Змінні захворювання серцево-судинної системи">').concat(this.cardiovascularDisease,"</textarea>\n             </div>\n        ")}},{key:"getOptionalInputsInfo",value:function(){return'\n            <h5 class="main-section__see-all-inf-header">Вік: <span class="main-section__see-all-inf-span">'.concat(this.age,'</span></h5>\n            <h5 class="main-section__see-all-inf-header">Звичайний тиск: <span class="main-section__see-all-inf-span">').concat(this.normalPressure,'</span></h5>\n            <h5 class="main-section__see-all-inf-header">Індекс маси тіла: <span class="main-section__see-all-inf-span">').concat(this.bodyMassIndex,'</span></h5>\n            <h5 class="main-section__see-all-inf-header">Перенесені захворювання серцево-судинної системи: <span class="main-section__see-all-inf-span">').concat(this.cardiovascularDisease,"</span></h5>\n        ")}},{key:"collectDataFromInputs",value:function(e){_get(_getPrototypeOf(r.prototype),"collectDataFromInputs",this).call(this,e),this.age=e.querySelector("#user-age-cardiolog").value,this.normalPressure=e.querySelector("#normal-pressure").value,this.bodyMassIndex=e.querySelector("#body-mass-index").value,this.cardiovascularDisease=e.querySelector("#cardiovascular-disease").value}}]),r}(),VisitTherapist=function(){_inherits(r,Visit);var n=_createSuper(r);function r(e){var t;return _classCallCheck(this,r),(t=n.call(this,e)).doctor="terapevt",t.doctorLabel="Терапевт",e&&(t.age=e.age),t}return _createClass(r,[{key:"getOptionalInputs",value:function(){return'\n            <div class="col">\n              <p class="col_paragraph">Вік:</p>  <input type="number" class="form-control" id="user-age-terapevt"  placeholder="Вік" value='.concat(this.age," >\n            </div>\n        ")}},{key:"getOptionalInputsInfo",value:function(){return'\n            <h5 class="main-section__see-all-inf-header">Вік: <span class="main-section__see-all-inf-span">'.concat(this.age,"</span></h5>\n        ")}},{key:"collectDataFromInputs",value:function(e){_get(_getPrototypeOf(r.prototype),"collectDataFromInputs",this).call(this,e),this.age=e.querySelector("#user-age-terapevt").value}}]),r}();function _regeneratorRuntime(){_regeneratorRuntime=function(){return a};var a={},e=Object.prototype,c=e.hasOwnProperty,l=Object.defineProperty||function(e,t,n){e[t]=n.value},t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",n=t.asyncIterator||"@@asyncIterator",o=t.toStringTag||"@@toStringTag";function i(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{i({},"")}catch(e){i=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var o,i,a,s,t=t&&t.prototype instanceof d?t:d,t=Object.create(t.prototype),r=new w(r||[]);return l(t,"_invoke",{value:(o=e,i=n,a=r,s="suspendedStart",function(e,t){if("executing"===s)throw new Error("Generator is already running");if("completed"===s){if("throw"===e)throw t;return C()}for(a.method=e,a.arg=t;;){var n=a.delegate;if(n){n=function e(t,n){var r=n.method,o=t.iterator[r];if(void 0===o)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=void 0,e(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),f;r=u(o,t.iterator,n.arg);if("throw"===r.type)return n.method="throw",n.arg=r.arg,n.delegate=null,f;o=r.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}(n,a);if(n){if(n===f)continue;return n}}if("next"===a.method)a.sent=a._sent=a.arg;else if("throw"===a.method){if("suspendedStart"===s)throw s="completed",a.arg;a.dispatchException(a.arg)}else"return"===a.method&&a.abrupt("return",a.arg);s="executing";n=u(o,i,a);if("normal"===n.type){if(s=a.done?"completed":"suspendedYield",n.arg===f)continue;return{value:n.arg,done:a.done}}"throw"===n.type&&(s="completed",a.method="throw",a.arg=n.arg)}})}),t}function u(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}a.wrap=s;var f={};function d(){}function p(){}function h(){}var t={},m=(i(t,r,function(){return this}),Object.getPrototypeOf),m=m&&m(m(k([]))),v=(m&&m!==e&&c.call(m,r)&&(t=m),h.prototype=d.prototype=Object.create(t));function y(e){["next","throw","return"].forEach(function(t){i(e,t,function(e){return this._invoke(t,e)})})}function g(a,s){var t;l(this,"_invoke",{value:function(n,r){function e(){return new s(function(e,t){!function t(e,n,r,o){var i,e=u(a[e],a,n);if("throw"!==e.type)return(n=(i=e.arg).value)&&"object"==_typeof(n)&&c.call(n,"__await")?s.resolve(n.__await).then(function(e){t("next",e,r,o)},function(e){t("throw",e,r,o)}):s.resolve(n).then(function(e){i.value=e,r(i)},function(e){return t("throw",e,r,o)});o(e.arg)}(n,r,e,t)})}return t=t?t.then(e,e):e()}})}function _(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function b(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function w(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(_,this),this.reset(!0)}function k(t){if(t){var n,e=t[r];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length))return n=-1,(e=function e(){for(;++n<t.length;)if(c.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e}).next=e}return{next:C}}function C(){return{value:void 0,done:!0}}return l(v,"constructor",{value:p.prototype=h,configurable:!0}),l(h,"constructor",{value:p,configurable:!0}),p.displayName=i(h,o,"GeneratorFunction"),a.isGeneratorFunction=function(e){e="function"==typeof e&&e.constructor;return!!e&&(e===p||"GeneratorFunction"===(e.displayName||e.name))},a.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,i(e,o,"GeneratorFunction")),e.prototype=Object.create(v),e},a.awrap=function(e){return{__await:e}},y(g.prototype),i(g.prototype,n,function(){return this}),a.AsyncIterator=g,a.async=function(e,t,n,r,o){void 0===o&&(o=Promise);var i=new g(s(e,t,n,r),o);return a.isGeneratorFunction(t)?i:i.next().then(function(e){return e.done?e.value:i.next()})},y(v),i(v,o,"Generator"),i(v,r,function(){return this}),i(v,"toString",function(){return"[object Generator]"}),a.keys=function(e){var t,n=Object(e),r=[];for(t in n)r.push(t);return r.reverse(),function e(){for(;r.length;){var t=r.pop();if(t in n)return e.value=t,e.done=!1,e}return e.done=!0,e}},a.values=k,w.prototype={constructor:w,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(b),!e)for(var t in this)"t"===t.charAt(0)&&c.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var r=this;function e(e,t){return i.type="throw",i.arg=n,r.next=e,t&&(r.method="next",r.arg=void 0),!!t}for(var t=this.tryEntries.length-1;0<=t;--t){var o=this.tryEntries[t],i=o.completion;if("root"===o.tryLoc)return e("end");if(o.tryLoc<=this.prev){var a=c.call(o,"catchLoc"),s=c.call(o,"finallyLoc");if(a&&s){if(this.prev<o.catchLoc)return e(o.catchLoc,!0);if(this.prev<o.finallyLoc)return e(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return e(o.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return e(o.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;0<=n;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&c.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}var i=(o=o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc?null:o)?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,f):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),b(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var n,r,o=this.tryEntries[t];if(o.tryLoc===e)return"throw"===(n=o.completion).type&&(r=n.arg,b(o)),r}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:k(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},a}function asyncGeneratorStep(e,t,n,r,o,i,a){try{var s=e[i](a),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,o)}function _asyncToGenerator(s){return function(){var e=this,a=arguments;return new Promise(function(t,n){var r=s.apply(e,a);function o(e){asyncGeneratorStep(r,t,n,o,i,"next",e)}function i(e){asyncGeneratorStep(r,t,n,o,i,"throw",e)}o(void 0)})}}function _get(){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=_superPropBase(e,t);if(r)return(r=Object.getOwnPropertyDescriptor(r,t)).get?r.get.call(arguments.length<3?e:n):r.value}).apply(this,arguments)}function _superPropBase(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=_getPrototypeOf(e)););return e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(n){var r=_isNativeReflectConstruct();return function(){var e,t=_getPrototypeOf(n);return e=r?(e=_getPrototypeOf(this).constructor,Reflect.construct(t,arguments,e)):t.apply(this,arguments),_possibleConstructorReturn(this,e)}}function _possibleConstructorReturn(e,t){if(t&&("object"===_typeof(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(e)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,_toPropertyKey(r.key),r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function _toPropertyKey(e){e=_toPrimitive(e,"string");return"symbol"===_typeof(e)?e:String(e)}function _toPrimitive(e,t){if("object"!==_typeof(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0===n)return("string"===t?String:Number)(e);n=n.call(e,t||"default");if("object"!==_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}var Modal=function(){function r(e,t,n){_classCallCheck(this,r),this.modal=document.querySelector(e),this.showButton=document.querySelector(t),this.closeButton=document.querySelector(n),this.handleShowButtonClick=this.handleShowButtonClick.bind(this),this.handleCloseButtonClick=this.handleCloseButtonClick.bind(this),this.showButton.addEventListener("click",this.handleShowButtonClick),this.closeButton.addEventListener("click",this.handleCloseButtonClick)}return _createClass(r,[{key:"handleShowButtonClick",value:function(e){e.preventDefault(),this.modal.style.display="block"}},{key:"handleCloseButtonClick",value:function(e){e.preventDefault(),this.modal.style.display="none"}},{key:"removeShowCloseListeners",value:function(){this.showButton.removeEventListener("click",this.handleShowButtonClick),this.closeButton.removeEventListener("click",this.handleCloseButtonClick)}}]),r}(),DoctorVisitModal=function(){_inherits(o,Modal);var e,r=_createSuper(o);function o(t){var n;return _classCallCheck(this,o),(n=r.call(this,"#new-visit-form","#btn_create_visit","#close_new_visit")).addNewVisitBtn=document.querySelector("#add_new_visit_button"),n.newVisitForm=document.querySelector("#new-visit-form"),n.doctorSelect=n.modal.querySelector("#doctor-type-select"),n.optionalInputs=n.modal.querySelector(".optional-inputs"),n.changeDoctorType=n.changeDoctorType.bind(_assertThisInitialized(n)),n.addNewVisitBtn.addEventListener("click",_asyncToGenerator(_regeneratorRuntime().mark(function e(){return _regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n.newVisitForm.style.display="none",e.t0=t,e.next=4,n.sendDataServer();case 4:e.t1=e.sent,(0,e.t0)(e.t1);case 6:case"end":return e.stop()}},e)}))),n.newVisitForm.addEventListener("click",function(e){e.target.classList.contains("modal-login")&&(n.newVisitForm.style.display="none")}),n}return _createClass(o,[{key:"handleShowButtonClick",value:function(e){_get(_getPrototypeOf(o.prototype),"handleShowButtonClick",this).call(this,e),this.doctorSelect.addEventListener("change",this.changeDoctorType),this.newVisitForm.querySelector("form").reset()}},{key:"handleCloseButtonClick",value:function(e){_get(_getPrototypeOf(o.prototype),"handleCloseButtonClick",this).call(this,e),this.doctorSelect.removeEventListener("change",this.changeDoctorType),this.setCardiologInputs(),this.doctorSelect.value="cardiolog"}},{key:"changeDoctorType",value:function(e){var t=e.target.value;switch(t){case"cardiolog":this.setCardiologInputs();break;case"stomatolog":this.setStomatologInputs();break;case"terapevt":this.setTerapevtInputs();break;default:console.error("unknown doctor type",t)}}},{key:"setCardiologInputs",value:function(){this.optionalInputs.innerHTML='\n            <div class="col">\n                <input type="number" class="form-control"  id="user-age-cardiolog" placeholder="Вік">\n            </div>\n            <div class="col">\n                <input type="number" class="form-control" id="normal-pressure" placeholder="Звичайний тиск">\n            </div>\n            <div class="col">\n                <input type="number" class="form-control" id="body-mass-index" placeholder="Індекс маси тіла">\n            </div>\n            <div class="col">\n                <textarea type="text" class="form-control" id="cardiovascular-disease" placeholder="Змінні захворювання серцево-судинної системи"></textarea>\n            </div>\n        '}},{key:"setStomatologInputs",value:function(){this.optionalInputs.innerHTML='\n            <div class="col">\n                <input type="date" class="form-control" id="date-visit" placeholder="Дата останнього відвідування">\n            </div>\n        '}},{key:"setTerapevtInputs",value:function(){this.optionalInputs.innerHTML='\n            <div class="col">\n                <input type="number" class="form-control" id="user-age-terapevt" placeholder="Вік">\n            </div>\n        '}},{key:"getDoctorVisitData",value:function(){switch(this.doctorSelect.value){case"cardiolog":return new VisitCardiologist;case"stomatolog":return new VisitDentist;case"terapevt":return new VisitTherapist}}},{key:"sendDataServer",value:(e=_asyncToGenerator(_regeneratorRuntime().mark(function e(){var t;return _regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("https://ajax.test-danit.com/api/v2/cards",{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(sessionStorage.getItem("token"))},body:JSON.stringify(this.getDoctorVisitData()),visit:"open"});case 2:return t=e.sent,document.querySelector(".main-section__header-novisit").style.display="none",e.next=6,t.json();case 6:return e.abrupt("return",e.sent);case 7:case"end":return e.stop()}},e,this)})),function(){return e.apply(this,arguments)})}]),o}();function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _regeneratorRuntime(){_regeneratorRuntime=function(){return a};var a={},e=Object.prototype,c=e.hasOwnProperty,l=Object.defineProperty||function(e,t,n){e[t]=n.value},t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",n=t.asyncIterator||"@@asyncIterator",o=t.toStringTag||"@@toStringTag";function i(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{i({},"")}catch(e){i=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var o,i,a,s,t=t&&t.prototype instanceof d?t:d,t=Object.create(t.prototype),r=new w(r||[]);return l(t,"_invoke",{value:(o=e,i=n,a=r,s="suspendedStart",function(e,t){if("executing"===s)throw new Error("Generator is already running");if("completed"===s){if("throw"===e)throw t;return C()}for(a.method=e,a.arg=t;;){var n=a.delegate;if(n){n=function e(t,n){var r=n.method,o=t.iterator[r];if(void 0===o)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=void 0,e(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),f;r=u(o,t.iterator,n.arg);if("throw"===r.type)return n.method="throw",n.arg=r.arg,n.delegate=null,f;o=r.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}(n,a);if(n){if(n===f)continue;return n}}if("next"===a.method)a.sent=a._sent=a.arg;else if("throw"===a.method){if("suspendedStart"===s)throw s="completed",a.arg;a.dispatchException(a.arg)}else"return"===a.method&&a.abrupt("return",a.arg);s="executing";n=u(o,i,a);if("normal"===n.type){if(s=a.done?"completed":"suspendedYield",n.arg===f)continue;return{value:n.arg,done:a.done}}"throw"===n.type&&(s="completed",a.method="throw",a.arg=n.arg)}})}),t}function u(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}a.wrap=s;var f={};function d(){}function p(){}function h(){}var t={},m=(i(t,r,function(){return this}),Object.getPrototypeOf),m=m&&m(m(k([]))),v=(m&&m!==e&&c.call(m,r)&&(t=m),h.prototype=d.prototype=Object.create(t));function y(e){["next","throw","return"].forEach(function(t){i(e,t,function(e){return this._invoke(t,e)})})}function g(a,s){var t;l(this,"_invoke",{value:function(n,r){function e(){return new s(function(e,t){!function t(e,n,r,o){var i,e=u(a[e],a,n);if("throw"!==e.type)return(n=(i=e.arg).value)&&"object"==_typeof(n)&&c.call(n,"__await")?s.resolve(n.__await).then(function(e){t("next",e,r,o)},function(e){t("throw",e,r,o)}):s.resolve(n).then(function(e){i.value=e,r(i)},function(e){return t("throw",e,r,o)});o(e.arg)}(n,r,e,t)})}return t=t?t.then(e,e):e()}})}function _(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function b(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function w(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(_,this),this.reset(!0)}function k(t){if(t){var n,e=t[r];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length))return n=-1,(e=function e(){for(;++n<t.length;)if(c.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e}).next=e}return{next:C}}function C(){return{value:void 0,done:!0}}return l(v,"constructor",{value:p.prototype=h,configurable:!0}),l(h,"constructor",{value:p,configurable:!0}),p.displayName=i(h,o,"GeneratorFunction"),a.isGeneratorFunction=function(e){e="function"==typeof e&&e.constructor;return!!e&&(e===p||"GeneratorFunction"===(e.displayName||e.name))},a.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,i(e,o,"GeneratorFunction")),e.prototype=Object.create(v),e},a.awrap=function(e){return{__await:e}},y(g.prototype),i(g.prototype,n,function(){return this}),a.AsyncIterator=g,a.async=function(e,t,n,r,o){void 0===o&&(o=Promise);var i=new g(s(e,t,n,r),o);return a.isGeneratorFunction(t)?i:i.next().then(function(e){return e.done?e.value:i.next()})},y(v),i(v,o,"Generator"),i(v,r,function(){return this}),i(v,"toString",function(){return"[object Generator]"}),a.keys=function(e){var t,n=Object(e),r=[];for(t in n)r.push(t);return r.reverse(),function e(){for(;r.length;){var t=r.pop();if(t in n)return e.value=t,e.done=!1,e}return e.done=!0,e}},a.values=k,w.prototype={constructor:w,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(b),!e)for(var t in this)"t"===t.charAt(0)&&c.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var r=this;function e(e,t){return i.type="throw",i.arg=n,r.next=e,t&&(r.method="next",r.arg=void 0),!!t}for(var t=this.tryEntries.length-1;0<=t;--t){var o=this.tryEntries[t],i=o.completion;if("root"===o.tryLoc)return e("end");if(o.tryLoc<=this.prev){var a=c.call(o,"catchLoc"),s=c.call(o,"finallyLoc");if(a&&s){if(this.prev<o.catchLoc)return e(o.catchLoc,!0);if(this.prev<o.finallyLoc)return e(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return e(o.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return e(o.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;0<=n;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&c.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}var i=(o=o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc?null:o)?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,f):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),b(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var n,r,o=this.tryEntries[t];if(o.tryLoc===e)return"throw"===(n=o.completion).type&&(r=n.arg,b(o)),r}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:k(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},a}function asyncGeneratorStep(e,t,n,r,o,i,a){try{var s=e[i](a),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,o)}function _asyncToGenerator(s){return function(){var e=this,a=arguments;return new Promise(function(t,n){var r=s.apply(e,a);function o(e){asyncGeneratorStep(r,t,n,o,i,"next",e)}function i(e){asyncGeneratorStep(r,t,n,o,i,"throw",e)}o(void 0)})}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,_toPropertyKey(r.key),r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function _toPropertyKey(e){e=_toPrimitive(e,"string");return"symbol"===_typeof(e)?e:String(e)}function _toPrimitive(e,t){if("object"!==_typeof(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0===n)return("string"===t?String:Number)(e);n=n.call(e,t||"default");if("object"!==_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}var Card=function(){function n(e,t){_classCallCheck(this,n),this.cardWrapper=null,this.cardContainer=null,this.headerNovisit=null,this.cardData=e,this.onCardDelete=t}var t,e;return _createClass(n,[{key:"cardBackgroundColor",get:function(){return"close"===this.cardData.visit?"#F7DADA":"#e3f3e1"}},{key:"urgencyColor",get:function(){return"Low"===this.cardData.urgency?"#8AE3FF":"Normal"===this.cardData.urgency?"#FDFF8A":"High"===this.cardData.urgency?"#FF8A98":void 0}},{key:"doctorLabel",get:function(){return"Лікар: ".concat(this.getDoctorVisit().doctorLabel)}},{key:"patientNameLabel",get:function(){var e=this.cardData.patientName||"Ім'я пацієнта не вказане";return"Пацієнт: ".concat(e)}},{key:"deleteCard",value:(e=_asyncToGenerator(_regeneratorRuntime().mark(function e(){return _regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("https://ajax.test-danit.com/api/v2/cards/".concat(this.cardData.id),{method:"DELETE",headers:{Authorization:"Bearer ".concat(sessionStorage.getItem("token"))}});case 2:200===e.sent.status&&this.cardWrapper.remove(),this.cardContainer.firstElementChild||(this.headerNovisit.style.display="block"),this.onCardDelete();case 6:case"end":return e.stop()}},e,this)})),function(){return e.apply(this,arguments)})},{key:"updateCard",value:(t=_asyncToGenerator(_regeneratorRuntime().mark(function e(t){var n;return _regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return this.cardData=t,e.next=3,fetch("https://ajax.test-danit.com/api/v2/cards/".concat(this.cardData.id),{method:"PUT",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(sessionStorage.getItem("token"))},body:JSON.stringify(this.cardData)});case 3:return n=e.sent,e.next=6,n.json();case 6:this.cardData=e.sent,this.cardWrapper.querySelector(".main-section__card").style.backgroundColor=this.cardBackgroundColor,this.cardWrapper.querySelector(".main-section__urgency").style.backgroundColor=this.urgencyColor,this.cardWrapper.querySelector(".main-section__card-name-doctor").textContent=this.doctorLabel,this.cardWrapper.querySelector(".main-section__card-name-patient").textContent=this.patientNameLabel;case 11:case"end":return e.stop()}},e,this)})),function(e){return t.apply(this,arguments)})},{key:"addEditingListener",value:function(){var n=this;this.cardWrapper.querySelector(".editing-btn").addEventListener("click",_asyncToGenerator(_regeneratorRuntime().mark(function e(){var t;return _regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=document.createElement("div"),e.next=3,n.getDoctorVisit().showEditorModal(t,{onEdit:function(e){n.updateCard(e)},onDelete:function(){var e=_asyncToGenerator(_regeneratorRuntime().mark(function e(){return _regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,n.deleteCard();case 2:case"end":return e.stop()}},e)}));return function(){return e.apply(this,arguments)}}()});case 3:case"end":return e.stop()}},e)})))}},{key:"addViewingListener",value:function(){var t=this;this.cardWrapper.querySelector(".viewing-btn").addEventListener("click",_asyncToGenerator(_regeneratorRuntime().mark(function e(){return _regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return document.querySelector(".main-section__header-novisit ").style.display="none",e.next=3,t.getDoctorVisit().showInfoModal(document.createElement("div"));case 3:case"end":return e.stop()}},e)})))}},{key:"getDoctorVisit",value:function(){return"cardiolog"===this.cardData.doctor?new VisitCardiologist(this.cardData):"stomatolog"===this.cardData.doctor?new VisitDentist(this.cardData):"terapevt"===this.cardData.doctor?new VisitTherapist(this.cardData):void 0}},{key:"render",value:function(e){var t=this;this.cardContainer=e,this.headerNovisit=this.cardContainer.parentNode.querySelector(".main-section__header-novisit"),this.cardWrapper=document.createElement("div"),this.cardWrapper.classList.add("main-section__card"),this.cardWrapper.innerHTML='\n            <div class="main-section__card" style="background-color:'.concat(this.cardBackgroundColor,';">\n                <div class="main-section__icon-container">\n                        <div class="main-section__urgency" style="background-color:').concat(this.urgencyColor,';"></div>\n                        <div class="main-section__svg-container">\n                            <a href="#" class="editing-btn">\n                            <svg width="20px" height="20px" viewBox="0 0 20 19" fill="none"\n                                 xmlns="http://www.w3.org/2000/svg">\n                                <path d="M20 4.97764C20.0007 4.85263 19.9755 4.7287 19.9258 4.61296C19.876 4.49722 19.8027 4.39196 19.71 4.30319L15.47 0.275495C15.3766 0.187455 15.2657 0.117801 15.1439 0.0705279C15.0221 0.0232551 14.8916 -0.000706917 14.76 1.58774e-05C14.6284 -0.000706917 14.4979 0.0232551 14.3761 0.0705279C14.2542 0.117801 14.1434 0.187455 14.05 0.275495L11.22 2.96379L0.290016 13.3465C0.197335 13.4353 0.12401 13.5405 0.0742453 13.6563C0.0244808 13.772 -0.000744177 13.896 1.67143e-05 14.021V18.0487C1.67143e-05 18.3006 0.105373 18.5422 0.292909 18.7204C0.480445 18.8985 0.734799 18.9986 1.00002 18.9986H5.24001C5.37993 19.0058 5.5199 18.985 5.65083 18.9376C5.78175 18.8901 5.90072 18.8171 6.00001 18.7231L16.87 8.34039L19.71 5.69959C19.8013 5.60752 19.8756 5.50156 19.93 5.38611C19.9396 5.31039 19.9396 5.23385 19.93 5.15813C19.9347 5.11391 19.9347 5.06936 19.93 5.02514L20 4.97764ZM4.83001 17.0987H2.00001V14.4104L11.93 4.97764L14.76 7.66594L4.83001 17.0987ZM16.17 6.32654L13.34 3.63824L14.76 2.29884L17.58 4.97764L16.17 6.32654Z"\n                                      fill="#307570"/>\n                            </svg>\n                            </a>\n                            <a href="#" class="viewing-btn">\n                            <svg width="20px" height="20px" viewBox="0 0 26 18" fill="none"\n                                 xmlns="http://www.w3.org/2000/svg">\n                                <path d="M1.44444 18C1.03519 18 0.692371 17.856 0.416 17.568C0.138667 17.281 0 16.925 0 16.5C0 16.075 0.138667 15.719 0.416 15.432C0.692371 15.144 1.03519 15 1.44444 15H24.5556C24.9648 15 25.3076 15.144 25.584 15.432C25.8613 15.719 26 16.075 26 16.5C26 16.925 25.8613 17.281 25.584 17.568C25.3076 17.856 24.9648 18 24.5556 18H1.44444ZM1.44444 10.5C1.03519 10.5 0.692371 10.356 0.416 10.068C0.138667 9.781 0 9.425 0 9C0 8.575 0.138667 8.2185 0.416 7.9305C0.692371 7.6435 1.03519 7.5 1.44444 7.5H24.5556C24.9648 7.5 25.3076 7.6435 25.584 7.9305C25.8613 8.2185 26 8.575 26 9C26 9.425 25.8613 9.781 25.584 10.068C25.3076 10.356 24.9648 10.5 24.5556 10.5H1.44444ZM1.44444 3C1.03519 3 0.692371 2.8565 0.416 2.5695C0.138667 2.2815 0 1.925 0 1.5C0 1.075 0.138667 0.7185 0.416 0.4305C0.692371 0.1435 1.03519 0 1.44444 0H24.5556C24.9648 0 25.3076 0.1435 25.584 0.4305C25.8613 0.7185 26 1.075 26 1.5C26 1.925 25.8613 2.2815 25.584 2.5695C25.3076 2.8565 24.9648 3 24.5556 3H1.44444Z"\n                                      fill="#307570"/>\n                            </svg>\n                            </a>\n                            <a href="#" class="trash-btn">\n                            <svg width="20px" height="20px" viewBox="0 0 18 19" fill="none"\n                                 xmlns="http://www.w3.org/2000/svg">\n                                <path d="M1.38462 1.26667C1.01739 1.26667 0.66521 1.40012 0.405544 1.63766C0.145879 1.87521 0 2.19739 0 2.53333V3.8C0 4.13594 0.145879 4.45812 0.405544 4.69567C0.66521 4.93321 1.01739 5.06667 1.38462 5.06667H2.07692V16.4667C2.07692 17.1385 2.36868 17.7829 2.88801 18.258C3.40734 18.7331 4.11171 19 4.84615 19H13.1538C13.8883 19 14.5927 18.7331 15.112 18.258C15.6313 17.7829 15.9231 17.1385 15.9231 16.4667V5.06667H16.6154C16.9826 5.06667 17.3348 4.93321 17.5945 4.69567C17.8541 4.45812 18 4.13594 18 3.8V2.53333C18 2.19739 17.8541 1.87521 17.5945 1.63766C17.3348 1.40012 16.9826 1.26667 16.6154 1.26667H11.7692C11.7692 0.930726 11.6234 0.608544 11.3637 0.370998C11.104 0.133452 10.7518 0 10.3846 0L7.61539 0C7.24816 0 6.89598 0.133452 6.63631 0.370998C6.37665 0.608544 6.23077 0.930726 6.23077 1.26667H1.38462ZM5.53846 6.33333C5.72207 6.33333 5.89816 6.40006 6.028 6.51883C6.15783 6.63761 6.23077 6.7987 6.23077 6.96667V15.8333C6.23077 16.0013 6.15783 16.1624 6.028 16.2812C5.89816 16.3999 5.72207 16.4667 5.53846 16.4667C5.35485 16.4667 5.17876 16.3999 5.04893 16.2812C4.91909 16.1624 4.84615 16.0013 4.84615 15.8333V6.96667C4.84615 6.7987 4.91909 6.63761 5.04893 6.51883C5.17876 6.40006 5.35485 6.33333 5.53846 6.33333ZM9 6.33333C9.18361 6.33333 9.3597 6.40006 9.48954 6.51883C9.61937 6.63761 9.69231 6.7987 9.69231 6.96667V15.8333C9.69231 16.0013 9.61937 16.1624 9.48954 16.2812C9.3597 16.3999 9.18361 16.4667 9 16.4667C8.81639 16.4667 8.6403 16.3999 8.51046 16.2812C8.38063 16.1624 8.30769 16.0013 8.30769 15.8333V6.96667C8.30769 6.7987 8.38063 6.63761 8.51046 6.51883C8.6403 6.40006 8.81639 6.33333 9 6.33333ZM13.1538 6.96667V15.8333C13.1538 16.0013 13.0809 16.1624 12.9511 16.2812C12.8212 16.3999 12.6452 16.4667 12.4615 16.4667C12.2779 16.4667 12.1018 16.3999 11.972 16.2812C11.8422 16.1624 11.7692 16.0013 11.7692 15.8333V6.96667C11.7692 6.7987 11.8422 6.63761 11.972 6.51883C12.1018 6.40006 12.2779 6.33333 12.4615 6.33333C12.6452 6.33333 12.8212 6.40006 12.9511 6.51883C13.0809 6.63761 13.1538 6.7987 13.1538 6.96667Z"\n                                      fill="#307570"/>\n                            </svg>\n                            </a>\n                        </div>\n                    </div>\n                    <div class="main-section__card-text-container">\n                        <h2 class="main-section__card-name-doctor">').concat(this.doctorLabel,'</h2>\n                        <p class="main-section__card-name-patient">').concat(this.patientNameLabel,"</p>\n                    </div>\n            </div>\n        "),this.cardContainer.append(this.cardWrapper),this.cardWrapper.querySelector(".trash-btn").addEventListener("click",_asyncToGenerator(_regeneratorRuntime().mark(function e(){return _regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.deleteCard();case 2:case"end":return e.stop()}},e)}))),this.addEditingListener(),this.addViewingListener(),"block"===this.headerNovisit.style.display&&(this.headerNovisit.style.display="none")}}]),n}(),CardsController=function(){function e(){var t=this;_classCallCheck(this,e),this.cards=[],this.doctorVisitModal=new DoctorVisitModal(function(e){return t.addCard(e)})}return _createClass(e,[{key:"addCard",value:function(t){var e=this,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:document.querySelector(".main-section__cards-container"),r=new Card(t,function(){e.cards=e.cards.filter(function(e){return e.id!==t.id})});r.render(n),this.cards.push(r)}}]),e}(),cardsController=new CardsController;function _createForOfIteratorHelper(e,t){var n,r,o,i,a="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(a)return r=!(n=!0),{s:function(){a=a.call(e)},n:function(){var e=a.next();return n=e.done,e},e:function(e){r=!0,o=e},f:function(){try{n||null==a.return||a.return()}finally{if(r)throw o}}};if(Array.isArray(e)||(a=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length)return a&&(e=a),i=0,{s:t=function(){},n:function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}},e:function(e){throw e},f:t};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){var n;if(e)return"string"==typeof e?_arrayLikeToArray(e,t):"Map"===(n="Object"===(n=Object.prototype.toString.call(e).slice(8,-1))&&e.constructor?e.constructor.name:n)||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var textInput=document.querySelector("#filter-text"),searchBtn=document.querySelector("#filter-serch-btn"),openBtn=document.querySelector("#filter-open-btn"),doneBtn=document.querySelector("#filter-done-btn"),highBtn=document.querySelector("#filter-high-btn"),normalBtn=document.querySelector("#filter-normal-btn"),lowBtn=document.querySelector("#filter-low-btn"),textInputS=document.querySelector("#filter-text-s"),searchBtnS=document.querySelector("#filter-serch-btn-s"),openBtnS=document.querySelector("#filter-open-btn-s"),doneBtnS=document.querySelector("#filter-done-btn-s"),highBtnS=document.querySelector("#filter-high-btn-s"),normalBtnS=document.querySelector("#filter-normal-btn-s"),lowBtnS=document.querySelector("#filter-low-btn-s"),openFilter=document.querySelector("#open-filter-btn"),closeFilter=document.querySelector("#close-filter-btn"),refreshFilterBtnS=document.querySelector(".filter-s__refresh-btn"),refreshFilterBtn=document.querySelector(".filter__refresh-btn");function cleanContainer(e){for(;e.firstChild;)e.removeChild(e.firstChild)}function refreshFilter(){highBtn.classList.remove("filter__btn--active"),normalBtn.classList.remove("filter__btn--active"),lowBtn.classList.remove("filter__btn--active"),highBtnS.classList.remove("filter-s__btn--active"),normalBtnS.classList.remove("filter-s__btn--active"),lowBtnS.classList.remove("filter-s__btn--active"),openBtn.classList.remove("filter__btn--active"),openBtnS.classList.remove("filter-s__btn--active"),doneBtn.classList.remove("filter__btn--active"),doneBtnS.classList.remove("filter-s__btn--active"),cleanContainer(document.querySelector(".main-section__cards-container")),fetch("https://ajax.test-danit.com/api/v2/cards",{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(sessionStorage.token)}}).then(function(e){return e.json()}).then(function(e){0!=e.length&&(document.querySelector(".main-section__header-novisit").style.display="none");var t,n=_createForOfIteratorHelper(e);try{for(n.s();!(t=n.n()).done;){var r=t.value;cardsController.addCard(r)}}catch(e){n.e(e)}finally{n.f()}})}function onInputEnter(e){var t,n;13===e.keyCode&&(openBtnS.classList.remove("filter-s__btn--active"),doneBtnS.classList.remove("filter-s__btn--active"),highBtnS.classList.remove("filter-s__btn--active"),normalBtnS.classList.remove("filter-s__btn--active"),lowBtnS.classList.remove("filter-s__btn--active"),openBtn.classList.remove("filter__btn--active"),doneBtn.classList.remove("filter__btn--active"),highBtn.classList.remove("filter__btn--active"),normalBtn.classList.remove("filter__btn--active"),lowBtn.classList.remove("filter__btn--active"),e=document.querySelector("#filter-text-s").value,t=document.querySelector("#filter-text").value,n="",n=0===e.length?String(t):String(e),cleanContainer(document.querySelector(".main-section__cards-container")),""!=n?fetch("https://ajax.test-danit.com/api/v2/cards",{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(sessionStorage.token)}}).then(function(e){return e.json()}).then(function(e){var t=0;0===t&&(document.querySelector(".main-section__header-novisit").style.display="none"),e.forEach(function(e){(String(e.title).toLowerCase().includes(n.toLowerCase())||String(e.description).toLowerCase().includes(n.toLowerCase()))&&(t++,cardsController.addCard(e))}),0===t&&(document.querySelector(".main-section__header-novisit").style.display="block")}):""===n&&(document.querySelector(".main-section__header-novisit").style.display="block"))}function onInputBtn(){openBtnS.classList.remove("filter-s__btn--active"),doneBtnS.classList.remove("filter-s__btn--active"),highBtnS.classList.remove("filter-s__btn--active"),normalBtnS.classList.remove("filter-s__btn--active"),lowBtnS.classList.remove("filter-s__btn--active"),openBtn.classList.remove("filter__btn--active"),doneBtn.classList.remove("filter__btn--active"),highBtn.classList.remove("filter__btn--active"),normalBtn.classList.remove("filter__btn--active"),lowBtn.classList.remove("filter__btn--active");var e=document.querySelector("#filter-text-s").value,t=document.querySelector("#filter-text").value,n="",n=0===e.length?String(t):String(e);cleanContainer(document.querySelector(".main-section__cards-container")),""!=n?fetch("https://ajax.test-danit.com/api/v2/cards",{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(sessionStorage.token)}}).then(function(e){return e.json()}).then(function(e){var t=0;0===t&&(document.querySelector(".main-section__header-novisit").style.display="none"),e.forEach(function(e){(String(e.title).toLowerCase().includes(n.toLowerCase())||String(e.description).toLowerCase().includes(n.toLowerCase()))&&(t++,cardsController.addCard(e))}),0===t&&(document.querySelector(".main-section__header-novisit").style.display="block")}):""===n&&(document.querySelector(".main-section__header-novisit").style.display="block")}function openFilterFunc(){var e=document.querySelector(".filter-sm");openFilter.classList.add("invisible"),closeFilter.classList.remove("invisible"),e.classList.remove("invisible")}function closeFilterFunc(){var e=document.querySelector(".filter-sm");closeFilter.classList.add("invisible"),openFilter.classList.remove("invisible"),e.classList.add("invisible")}function statusBtnsS(e){e.target.classList.add("filter-s__btn--active"),e.target===openBtnS?(doneBtnS.classList.remove("filter-s__btn--active"),highBtnS.classList.remove("filter-s__btn--active"),normalBtnS.classList.remove("filter-s__btn--active"),lowBtnS.classList.remove("filter-s__btn--active"),cleanContainer(document.querySelector(".main-section__cards-container")),fetch("https://ajax.test-danit.com/api/v2/cards",{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(sessionStorage.token)}}).then(function(e){return e.json()}).then(function(e){var t,n=0,r=(0===n&&(document.querySelector(".main-section__header-novisit").style.display="none"),_createForOfIteratorHelper(e));try{for(r.s();!(t=r.n()).done;){var o=t.value;"open"===o.visit&&(n++,cardsController.addCard(o))}}catch(e){r.e(e)}finally{r.f()}0===n&&(document.querySelector(".main-section__header-novisit").style.display="block")})):(openBtnS.classList.remove("filter-s__btn--active"),highBtnS.classList.remove("filter-s__btn--active"),normalBtnS.classList.remove("filter-s__btn--active"),lowBtnS.classList.remove("filter-s__btn--active"),cleanContainer(document.querySelector(".main-section__cards-container")),fetch("https://ajax.test-danit.com/api/v2/cards",{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(sessionStorage.token)}}).then(function(e){return e.json()}).then(function(e){var t,n=0,r=(0===n&&(document.querySelector(".main-section__header-novisit").style.display="none"),_createForOfIteratorHelper(e));try{for(r.s();!(t=r.n()).done;){var o=t.value;"close"===o.visit&&(n++,cardsController.addCard(o))}}catch(e){r.e(e)}finally{r.f()}0===n&&(document.querySelector(".main-section__header-novisit").style.display="block")}))}function urgencyBtnsS(e){e.target.classList.add("filter-s__btn--active"),openBtn.classList.remove("filter-s__btn--active"),openBtnS.classList.remove("filter-s__btn--active"),doneBtn.classList.remove("filter-s__btn--active"),doneBtnS.classList.remove("filter-s__btn--active"),e.target===highBtnS?(normalBtnS.classList.remove("filter-s__btn--active"),lowBtnS.classList.remove("filter-s__btn--active"),cleanContainer(document.querySelector(".main-section__cards-container")),fetch("https://ajax.test-danit.com/api/v2/cards",{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(sessionStorage.token)}}).then(function(e){return e.json()}).then(function(e){0!=e.length&&(document.querySelector(".main-section__header-novisit").style.display="none");var t,n=_createForOfIteratorHelper(e);try{for(n.s();!(t=n.n()).done;){var r=t.value;"High"===r.urgency&&cardsController.addCard(r)}}catch(e){n.e(e)}finally{n.f()}})):e.target===normalBtnS?(highBtnS.classList.remove("filter-s__btn--active"),lowBtnS.classList.remove("filter-s__btn--active"),cleanContainer(document.querySelector(".main-section__cards-container")),fetch("https://ajax.test-danit.com/api/v2/cards",{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(sessionStorage.token)}}).then(function(e){return e.json()}).then(function(e){0!=e.length&&(document.querySelector(".main-section__header-novisit").style.display="none");var t,n=_createForOfIteratorHelper(e);try{for(n.s();!(t=n.n()).done;){var r=t.value;"Normal"===r.urgency&&cardsController.addCard(r)}}catch(e){n.e(e)}finally{n.f()}})):(highBtnS.classList.remove("filter-s__btn--active"),normalBtnS.classList.remove("filter-s__btn--active"),cleanContainer(document.querySelector(".main-section__cards-container")),fetch("https://ajax.test-danit.com/api/v2/cards",{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(sessionStorage.token)}}).then(function(e){return e.json()}).then(function(e){0!=e.length&&(document.querySelector(".main-section__header-novisit").style.display="none");var t,n=_createForOfIteratorHelper(e);try{for(n.s();!(t=n.n()).done;){var r=t.value;"Low"===r.urgency&&cardsController.addCard(r)}}catch(e){n.e(e)}finally{n.f()}}))}function statusBtns(e){e.target.classList.add("filter__btn--active"),e.target===openBtn?(doneBtn.classList.remove("filter__btn--active"),highBtn.classList.remove("filter__btn--active"),normalBtn.classList.remove("filter__btn--active"),lowBtn.classList.remove("filter__btn--active"),cleanContainer(document.querySelector(".main-section__cards-container")),fetch("https://ajax.test-danit.com/api/v2/cards",{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(sessionStorage.token)}}).then(function(e){return e.json()}).then(function(e){var t,n=0,r=(0===n&&(document.querySelector(".main-section__header-novisit").style.display="none"),_createForOfIteratorHelper(e));try{for(r.s();!(t=r.n()).done;){var o=t.value;"open"===o.visit&&(n++,cardsController.addCard(o))}}catch(e){r.e(e)}finally{r.f()}0===n&&(document.querySelector(".main-section__header-novisit").style.display="block")})):(openBtn.classList.remove("filter__btn--active"),highBtn.classList.remove("filter__btn--active"),normalBtn.classList.remove("filter__btn--active"),lowBtn.classList.remove("filter__btn--active"),cleanContainer(document.querySelector(".main-section__cards-container")),fetch("https://ajax.test-danit.com/api/v2/cards",{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(sessionStorage.token)}}).then(function(e){return e.json()}).then(function(e){var t,n=0,r=(0===n&&(document.querySelector(".main-section__header-novisit").style.display="none"),_createForOfIteratorHelper(e));try{for(r.s();!(t=r.n()).done;){var o=t.value;"close"===o.visit&&(n++,cardsController.addCard(o))}}catch(e){r.e(e)}finally{r.f()}0===n&&(document.querySelector(".main-section__header-novisit").style.display="block")}))}function urgencyBtns(e){e.target.classList.add("filter__btn--active"),openBtn.classList.remove("filter__btn--active"),openBtnS.classList.remove("filter__btn--active"),doneBtn.classList.remove("filter__btn--active"),doneBtnS.classList.remove("filter__btn--active"),e.target===highBtn?(normalBtn.classList.remove("filter__btn--active"),lowBtn.classList.remove("filter__btn--active"),cleanContainer(document.querySelector(".main-section__cards-container")),fetch("https://ajax.test-danit.com/api/v2/cards",{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(sessionStorage.token)}}).then(function(e){return e.json()}).then(function(e){var t,n=0,r=(0===n&&(document.querySelector(".main-section__header-novisit").style.display="none"),_createForOfIteratorHelper(e));try{for(r.s();!(t=r.n()).done;){var o=t.value;"High"===o.urgency&&(n++,cardsController.addCard(o))}}catch(e){r.e(e)}finally{r.f()}0===n&&(document.querySelector(".main-section__header-novisit").style.display="block")})):e.target===normalBtn?(highBtn.classList.remove("filter__btn--active"),lowBtn.classList.remove("filter__btn--active"),cleanContainer(document.querySelector(".main-section__cards-container")),fetch("https://ajax.test-danit.com/api/v2/cards",{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(sessionStorage.token)}}).then(function(e){return e.json()}).then(function(e){var t,n=0,r=(0===n&&(document.querySelector(".main-section__header-novisit").style.display="none"),_createForOfIteratorHelper(e));try{for(r.s();!(t=r.n()).done;){var o=t.value;"Normal"===o.urgency&&(n++,cardsController.addCard(o))}}catch(e){r.e(e)}finally{r.f()}0===n&&(document.querySelector(".main-section__header-novisit").style.display="block")})):(highBtn.classList.remove("filter__btn--active"),normalBtn.classList.remove("filter__btn--active"),cleanContainer(document.querySelector(".main-section__cards-container")),fetch("https://ajax.test-danit.com/api/v2/cards",{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(sessionStorage.token)}}).then(function(e){return e.json()}).then(function(e){var t,n=0,r=(0===n&&(document.querySelector(".main-section__header-novisit").style.display="none"),_createForOfIteratorHelper(e));try{for(r.s();!(t=r.n()).done;){var o=t.value;"Low"===o.urgency&&(n++,cardsController.addCard(o))}}catch(e){r.e(e)}finally{r.f()}0===n&&(document.querySelector(".main-section__header-novisit").style.display="block")}))}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _regeneratorRuntime(){_regeneratorRuntime=function(){return a};var a={},e=Object.prototype,c=e.hasOwnProperty,l=Object.defineProperty||function(e,t,n){e[t]=n.value},t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",n=t.asyncIterator||"@@asyncIterator",o=t.toStringTag||"@@toStringTag";function i(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{i({},"")}catch(e){i=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var o,i,a,s,t=t&&t.prototype instanceof d?t:d,t=Object.create(t.prototype),r=new w(r||[]);return l(t,"_invoke",{value:(o=e,i=n,a=r,s="suspendedStart",function(e,t){if("executing"===s)throw new Error("Generator is already running");if("completed"===s){if("throw"===e)throw t;return C()}for(a.method=e,a.arg=t;;){var n=a.delegate;if(n){n=function e(t,n){var r=n.method,o=t.iterator[r];if(void 0===o)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=void 0,e(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),f;r=u(o,t.iterator,n.arg);if("throw"===r.type)return n.method="throw",n.arg=r.arg,n.delegate=null,f;o=r.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}(n,a);if(n){if(n===f)continue;return n}}if("next"===a.method)a.sent=a._sent=a.arg;else if("throw"===a.method){if("suspendedStart"===s)throw s="completed",a.arg;a.dispatchException(a.arg)}else"return"===a.method&&a.abrupt("return",a.arg);s="executing";n=u(o,i,a);if("normal"===n.type){if(s=a.done?"completed":"suspendedYield",n.arg===f)continue;return{value:n.arg,done:a.done}}"throw"===n.type&&(s="completed",a.method="throw",a.arg=n.arg)}})}),t}function u(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}a.wrap=s;var f={};function d(){}function p(){}function h(){}var t={},m=(i(t,r,function(){return this}),Object.getPrototypeOf),m=m&&m(m(k([]))),v=(m&&m!==e&&c.call(m,r)&&(t=m),h.prototype=d.prototype=Object.create(t));function y(e){["next","throw","return"].forEach(function(t){i(e,t,function(e){return this._invoke(t,e)})})}function g(a,s){var t;l(this,"_invoke",{value:function(n,r){function e(){return new s(function(e,t){!function t(e,n,r,o){var i,e=u(a[e],a,n);if("throw"!==e.type)return(n=(i=e.arg).value)&&"object"==_typeof(n)&&c.call(n,"__await")?s.resolve(n.__await).then(function(e){t("next",e,r,o)},function(e){t("throw",e,r,o)}):s.resolve(n).then(function(e){i.value=e,r(i)},function(e){return t("throw",e,r,o)});o(e.arg)}(n,r,e,t)})}return t=t?t.then(e,e):e()}})}function _(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function b(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function w(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(_,this),this.reset(!0)}function k(t){if(t){var n,e=t[r];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length))return n=-1,(e=function e(){for(;++n<t.length;)if(c.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e}).next=e}return{next:C}}function C(){return{value:void 0,done:!0}}return l(v,"constructor",{value:p.prototype=h,configurable:!0}),l(h,"constructor",{value:p,configurable:!0}),p.displayName=i(h,o,"GeneratorFunction"),a.isGeneratorFunction=function(e){e="function"==typeof e&&e.constructor;return!!e&&(e===p||"GeneratorFunction"===(e.displayName||e.name))},a.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,i(e,o,"GeneratorFunction")),e.prototype=Object.create(v),e},a.awrap=function(e){return{__await:e}},y(g.prototype),i(g.prototype,n,function(){return this}),a.AsyncIterator=g,a.async=function(e,t,n,r,o){void 0===o&&(o=Promise);var i=new g(s(e,t,n,r),o);return a.isGeneratorFunction(t)?i:i.next().then(function(e){return e.done?e.value:i.next()})},y(v),i(v,o,"Generator"),i(v,r,function(){return this}),i(v,"toString",function(){return"[object Generator]"}),a.keys=function(e){var t,n=Object(e),r=[];for(t in n)r.push(t);return r.reverse(),function e(){for(;r.length;){var t=r.pop();if(t in n)return e.value=t,e.done=!1,e}return e.done=!0,e}},a.values=k,w.prototype={constructor:w,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(b),!e)for(var t in this)"t"===t.charAt(0)&&c.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var r=this;function e(e,t){return i.type="throw",i.arg=n,r.next=e,t&&(r.method="next",r.arg=void 0),!!t}for(var t=this.tryEntries.length-1;0<=t;--t){var o=this.tryEntries[t],i=o.completion;if("root"===o.tryLoc)return e("end");if(o.tryLoc<=this.prev){var a=c.call(o,"catchLoc"),s=c.call(o,"finallyLoc");if(a&&s){if(this.prev<o.catchLoc)return e(o.catchLoc,!0);if(this.prev<o.finallyLoc)return e(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return e(o.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return e(o.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;0<=n;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&c.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}var i=(o=o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc?null:o)?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,f):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),b(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var n,r,o=this.tryEntries[t];if(o.tryLoc===e)return"throw"===(n=o.completion).type&&(r=n.arg,b(o)),r}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:k(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},a}function _createForOfIteratorHelper(e,t){var n,r,o,i,a="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(a)return r=!(n=!0),{s:function(){a=a.call(e)},n:function(){var e=a.next();return n=e.done,e},e:function(e){r=!0,o=e},f:function(){try{n||null==a.return||a.return()}finally{if(r)throw o}}};if(Array.isArray(e)||(a=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length)return a&&(e=a),i=0,{s:t=function(){},n:function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}},e:function(e){throw e},f:t};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){var n;if(e)return"string"==typeof e?_arrayLikeToArray(e,t):"Map"===(n="Object"===(n=Object.prototype.toString.call(e).slice(8,-1))&&e.constructor?e.constructor.name:n)||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function asyncGeneratorStep(e,t,n,r,o,i,a){try{var s=e[i](a),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,o)}function _asyncToGenerator(s){return function(){var e=this,a=arguments;return new Promise(function(t,n){var r=s.apply(e,a);function o(e){asyncGeneratorStep(r,t,n,o,i,"next",e)}function i(e){asyncGeneratorStep(r,t,n,o,i,"throw",e)}o(void 0)})}}refreshFilterBtnS.addEventListener("click",refreshFilter),refreshFilterBtn.addEventListener("click",refreshFilter),openBtnS.addEventListener("click",statusBtnsS),doneBtnS.addEventListener("click",statusBtnsS),highBtnS.addEventListener("click",urgencyBtnsS),normalBtnS.addEventListener("click",urgencyBtnsS),lowBtnS.addEventListener("click",urgencyBtnsS),textInputS.addEventListener("keydown",onInputEnter),searchBtnS.addEventListener("click",onInputBtn),openFilter.addEventListener("click",openFilterFunc),closeFilter.addEventListener("click",closeFilterFunc),openBtn.addEventListener("click",statusBtns),doneBtn.addEventListener("click",statusBtns),highBtn.addEventListener("click",urgencyBtns),normalBtn.addEventListener("click",urgencyBtns),lowBtn.addEventListener("click",urgencyBtns),textInput.addEventListener("keydown",onInputEnter),searchBtn.addEventListener("click",onInputBtn);var headerBtnLogin=document.querySelector(".header__btn-login"),headerBtnExit=document.querySelector(".header__btn-exit"),headerBtns=document.querySelector(".header__btns"),modalLoginBtnDone=document.querySelector(".modal-login__btn-done"),modalLoginBtnClose=document.querySelector(".modal-login__btn-close"),modalLogin=document.querySelector(".modal-login"),token="";function headerLogin(){modalLogin.classList.remove("invisible")}function headerExit(){location.reload(),sessionStorage.token=null}function modalDoneBtn(){return _modalDoneBtn.apply(this,arguments)}function _modalDoneBtn(){return(_modalDoneBtn=_asyncToGenerator(_regeneratorRuntime().mark(function e(){var t,n,r,o;return _regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=document.querySelector(".modal-login"),n=document.querySelector("#loginEmail").value,r=document.querySelector("#loginPassword").value,o=document.querySelector(".header__text"),e.next=6,fetch("https://ajax.test-danit.com/api/v2/cards/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:"".concat(n),password:"".concat(r)})}).then(function(e){if(!(400<=e.status))return o.innerHTML="Вітаємо, <b>".concat(n,"</b>!"),t.classList.add("invisible"),headerBtnLogin.classList.add("invisible"),headerBtns.classList.remove("invisible"),e.text();e=document.querySelector("#emailHelp");e.style.color="red",e.innerHTML="Incorrect username or password!"}).then(function(e){return sessionStorage.setItem("token",e),e}).then(function(){var t=_asyncToGenerator(_regeneratorRuntime().mark(function e(t){return _regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("https://ajax.test-danit.com/api/v2/cards",{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(t)}}).then(function(e){return e.json()}).then(function(e){cleanContainer(document.querySelector(".main-section__cards-container")),0!=e.length&&(document.querySelector(".main-section__header-novisit").style.display="none");var t,n=_createForOfIteratorHelper(e);try{for(n.s();!(t=n.n()).done;){var r=t.value;cardsController.addCard(r)}}catch(e){n.e(e)}finally{n.f()}});case 2:case"end":return e.stop()}},e)}));return function(e){return t.apply(this,arguments)}}());case 6:case"end":return e.stop()}},e)}))).apply(this,arguments)}function modalCloseBtn(){document.querySelector(".modal-login").classList.add("invisible")}function _get(){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=_superPropBase(e,t);if(r)return(r=Object.getOwnPropertyDescriptor(r,t)).get?r.get.call(arguments.length<3?e:n):r.value}).apply(this,arguments)}function _superPropBase(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=_getPrototypeOf(e)););return e}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(n){var r=_isNativeReflectConstruct();return function(){var e,t=_getPrototypeOf(n);return e=r?(e=_getPrototypeOf(this).constructor,Reflect.construct(t,arguments,e)):t.apply(this,arguments),_possibleConstructorReturn(this,e)}}function _possibleConstructorReturn(e,t){if(t&&("object"===_typeof(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(e)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ownKeys(t,e){var n,r=Object.keys(t);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(t),e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),r.push.apply(r,n)),r}function _objectSpread(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?ownKeys(Object(n),!0).forEach(function(e){_defineProperty(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}function _defineProperty(e,t,n){return(t=_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,_toPropertyKey(r.key),r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function _toPropertyKey(e){e=_toPrimitive(e,"string");return"symbol"===_typeof(e)?e:String(e)}function _toPrimitive(e,t){if("object"!==_typeof(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0===n)return("string"===t?String:Number)(e);n=n.call(e,t||"default");if("object"!==_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_unsupportedIterableToArray(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArrayLimit(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,s=[],c=!0,l=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=i.call(n)).done)&&(s.push(r.value),s.length!==t);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(l)throw o}}return s}}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _createForOfIteratorHelper(e,t){var n,r,o,i,a="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(a)return r=!(n=!0),{s:function(){a=a.call(e)},n:function(){var e=a.next();return n=e.done,e},e:function(e){r=!0,o=e},f:function(){try{n||null==a.return||a.return()}finally{if(r)throw o}}};if(Array.isArray(e)||(a=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length)return a&&(e=a),i=0,{s:t=function(){},n:function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}},e:function(e){throw e},f:t};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){var n;if(e)return"string"==typeof e?_arrayLikeToArray(e,t):"Map"===(n="Object"===(n=Object.prototype.toString.call(e).slice(8,-1))&&e.constructor?e.constructor.name:n)||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}window.addEventListener("reload",sessionStorage.clear()),headerBtnLogin.onclick=headerLogin,headerBtnExit.onclick=headerExit,modalLogin.addEventListener("click",function(e){e.target===modalLogin&&modalLogin.classList.add("invisible")}),modalLoginBtnDone.onclick=modalDoneBtn,modalLoginBtnClose.onclick=modalCloseBtn,function(e){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):("undefined"!=typeof globalThis?globalThis:self).bootstrap=e()}(function(){function N(e){return(e=K(e))&&document.querySelector(e)?e:null}function a(e){return(e=K(e))?document.querySelector(e):null}function q(e){e.dispatchEvent(new Event(G))}function s(e){return u(e)?e.jquery?e[0]:e:"string"==typeof e&&0<e.length?document.querySelector(e):null}function i(e){if(!u(e)||0===e.getClientRects().length)return!1;var t="visible"===getComputedStyle(e).getPropertyValue("visibility"),n=e.closest("details:not([open])");if(n&&n!==e){e=e.closest("summary");if(e&&e.parentNode!==n)return!1;if(null===e)return!1}return t}function c(e){return!e||e.nodeType!==Node.ELEMENT_NODE||!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled"))}function M(e){var t;return document.documentElement.attachShadow?"function"==typeof e.getRootNode?(t=e.getRootNode())instanceof ShadowRoot?t:null:e instanceof ShadowRoot?e:e.parentNode?M(e.parentNode):null:null}function F(){}function H(e){e.offsetHeight}function R(){return window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null}function o(){return"rtl"===document.documentElement.dir}function e(r){var e;e=function(){var e,t,n=R();n&&(e=r.NAME,t=n.fn[e],n.fn[e]=r.jQueryInterface,n.fn[e].Constructor=r,n.fn[e].noConflict=function(){return n.fn[e]=t,r.jQueryInterface})},"loading"===document.readyState?(Y.length||document.addEventListener("DOMContentLoaded",function(){var e,t=_createForOfIteratorHelper(Y);try{for(t.s();!(e=t.n()).done;)(0,e.value)()}catch(e){t.e(e)}finally{t.f()}}),Y.push(e)):e()}function l(e){"function"==typeof e&&e()}function W(n,r){var e,t,o,i,a;2<arguments.length&&void 0!==arguments[2]&&!arguments[2]?l(n):(o=5+((e=r)&&(t=(e=window.getComputedStyle(e)).transitionDuration,e=e.transitionDelay,o=Number.parseFloat(t),i=Number.parseFloat(e),o||i)?(t=t.split(",")[0],e=e.split(",")[0],(Number.parseFloat(t)+Number.parseFloat(e))*z):0),a=!1,r.addEventListener(G,function e(t){t.target===r&&(a=!0,r.removeEventListener(G,e),l(n))}),setTimeout(function(){a||q(r)},o))}function V(e,t,n,r){var o=e.length;return-1===(t=e.indexOf(t))?!n&&r?e[o-1]:e[0]:(t+=n?1:-1,r&&(t=(t+o)%o),e[Math.max(0,Math.min(t,o-1))])}var z=1e3,G="transitionend",K=function(e){var t=e.getAttribute("data-bs-target");if(!t||"#"===t){e=e.getAttribute("href");if(!e||!e.includes("#")&&!e.startsWith("."))return null;t=(e=e.includes("#")&&!e.startsWith("#")?"#".concat(e.split("#")[1]):e)&&"#"!==e?e.trim():null}return t},u=function(e){return!(!e||"object"!==_typeof(e))&&void 0!==(e=void 0!==e.jquery?e[0]:e).nodeType},Y=[],U=/[^.]*(?=\..*)\.|.*/,X=/\..*/,Q=/::\d+$/,Z={},$=1,J={mouseenter:"mouseover",mouseleave:"mouseout"},ee=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function te(e,t){return t&&"".concat(t,"::").concat($++)||e.uidEvent||$++}function ne(e){var t=te(e);return e.uidEvent=t,Z[t]=Z[t]||{},Z[t]}function re(e,t,n){var r=2<arguments.length&&void 0!==n?n:null;return Object.values(e).find(function(e){return e.callable===t&&e.delegationSelector===r})}function oe(e,t,n){var r="string"==typeof t,t=!r&&t||n,n=se(e);return[r,t,n=ee.has(n)?n:e]}function ie(e,t,n,r,o){var i,a,s,c,l,u,f,d,p,h;"string"==typeof t&&e&&(i=(r=_slicedToArray(oe(t,n,r),3))[0],a=r[1],r=r[2],t in J&&(s=a,a=function(e){if(!e.relatedTarget||e.relatedTarget!==e.delegateTarget&&!e.delegateTarget.contains(e.relatedTarget))return s.call(this,e)}),(l=re(c=(c=ne(e))[r]||(c[r]={}),a,i?n:null))?l.oneOff=l.oneOff&&o:(l=te(a,t.replace(U,"")),(t=i?(d=e,p=n,h=a,function e(t){for(var n=d.querySelectorAll(p),r=t.target;r&&r!==this;r=r.parentNode){var o,i=_createForOfIteratorHelper(n);try{for(i.s();!(o=i.n()).done;){var a=o.value;if(a===r)return ce(t,{delegateTarget:r}),e.oneOff&&m.off(d,t.type,p,h),h.apply(r,[t])}}catch(e){i.e(e)}finally{i.f()}}}):(u=e,f=a,function e(t){return ce(t,{delegateTarget:u}),e.oneOff&&m.off(u,t.type,f),f.apply(u,[t])})).delegationSelector=i?n:null,t.callable=a,t.oneOff=o,c[t.uidEvent=l]=t,e.addEventListener(r,t,i)))}function ae(e,t,n,r,o){r=re(t[n],r,o);r&&(e.removeEventListener(n,r,Boolean(o)),delete t[n][r.uidEvent])}function se(e){return e=e.replace(X,""),J[e]||e}var m={on:function(e,t,n,r){ie(e,t,n,r,!1)},one:function(e,t,n,r){ie(e,t,n,r,!0)},off:function(e,t,n,r){if("string"==typeof t&&e){var r=_slicedToArray(oe(t,n,r),3),o=r[0],i=r[1],a=r[2],s=a!==t,c=ne(e),l=c[a]||{},r=t.startsWith(".");if(void 0!==i)return Object.keys(l).length?void ae(e,c,a,i,o?n:null):void 0;if(r)for(var u=0,f=Object.keys(c);u<f.length;u++)for(var d=f[u],p=(b=_=g=y=v=m=h=p=void 0,e),h=c,m=d,v=t.slice(1),y=h[m]||{},g=0,_=Object.keys(y);g<_.length;g++){var b=_[g];b.includes(v)&&ae(p,h,m,(b=y[b]).callable,b.delegationSelector)}for(var w=0,k=Object.keys(l);w<k.length;w++){var C=k[w],S=C.replace(Q,"");s&&!t.includes(S)||ae(e,c,a,(S=l[C]).callable,S.delegationSelector)}}},trigger:function(e,t,n){if("string"!=typeof t||!e)return null;var r=R(),o=null,i=!0,a=!0,s=!1;t!==se(t)&&r&&(o=r.Event(t,n),r(e).trigger(o),i=!o.isPropagationStopped(),a=!o.isImmediatePropagationStopped(),s=o.isDefaultPrevented());r=ce(r=new Event(t,{bubbles:i,cancelable:!0}),n);return s&&r.preventDefault(),a&&e.dispatchEvent(r),r.defaultPrevented&&o&&o.preventDefault(),r}};function ce(r,e){for(var o=0,i=Object.entries(e||{});o<i.length;o++)!function(){var e=_slicedToArray(i[o],2),t=e[0],n=e[1];try{r[t]=n}catch(e){Object.defineProperty(r,t,{configurable:!0,get:function(){return n}})}}();return r}var r=new Map,le=function(e,t,n){r.has(e)||r.set(e,new Map);e=r.get(e);e.has(t)||0===e.size?e.set(t,n):console.error("Bootstrap doesn't allow more than one instance per element. Bound instance: ".concat(Array.from(e.keys())[0],"."))},ue=function(e,t){return r.has(e)&&r.get(e).get(t)||null},fe=function(e,t){var n;r.has(e)&&((n=r.get(e)).delete(t),0===n.size)&&r.delete(e)};function de(t){if("true"===t)return!0;if("false"===t)return!1;if(t===Number(t).toString())return Number(t);if(""===t||"null"===t)return null;if("string"!=typeof t)return t;try{return JSON.parse(decodeURIComponent(t))}catch(e){return t}}function pe(e){return e.replace(/[A-Z]/g,function(e){return"-".concat(e.toLowerCase())})}function he(t){var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"hide",e="click.dismiss".concat(t.EVENT_KEY),r=t.NAME;m.on(document,e,'[data-bs-dismiss="'.concat(r,'"]'),function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),c(this)||(e=a(this)||this.closest(".".concat(r)),t.getOrCreateInstance(e)[n]())})}var me=function(e,t,n){e.setAttribute("data-bs-".concat(pe(t)),n)},ve=function(e,t){e.removeAttribute("data-bs-".concat(pe(t)))},ye=function(e){if(!e)return{};var t,n={},r=Object.keys(e.dataset).filter(function(e){return e.startsWith("bs")&&!e.startsWith("bsConfig")}),o=_createForOfIteratorHelper(r);try{for(o.s();!(t=o.n()).done;){var i=t.value,a=i.replace(/^bs/,"");n[a=a.charAt(0).toLowerCase()+a.slice(1,a.length)]=de(e.dataset[i])}}catch(e){o.e(e)}finally{o.f()}return n},ge=function(e,t){return de(e.getAttribute("data-bs-".concat(pe(t))))},_e=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"_getConfig",value:function(e){return e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}},{key:"_configAfterMerge",value:function(e){return e}},{key:"_mergeConfigObj",value:function(e,t){var n=u(t)?ge(t,"config"):{};return _objectSpread(_objectSpread(_objectSpread(_objectSpread({},this.constructor.Default),"object"===_typeof(n)?n:{}),u(t)?ye(t):{}),"object"===_typeof(e)?e:{})}},{key:"_typeCheckConfig",value:function(e){for(var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.constructor.DefaultType,n=0,r=Object.keys(t);n<r.length;n++){var o=r[n],i=t[o],a=e[o],a=u(a)?"element":null==(a=a)?"".concat(a):Object.prototype.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(i).test(a))throw new TypeError("".concat(this.constructor.NAME.toUpperCase(),': Option "').concat(o,'" provided type "').concat(a,'" but expected type "').concat(i,'".'))}}}],[{key:"Default",get:function(){return{}}},{key:"DefaultType",get:function(){return{}}},{key:"NAME",get:function(){throw new Error('You have to implement the static method "NAME", for each component!')}}]),e}(),t=function(){_inherits(o,_e);var r=_createSuper(o);function o(e,t){var n;return _classCallCheck(this,o),n=r.call(this),(e=s(e))?(n._element=e,n._config=n._getConfig(t),le(n._element,n.constructor.DATA_KEY,_assertThisInitialized(n)),n):_possibleConstructorReturn(n)}return _createClass(o,[{key:"dispose",value:function(){fe(this._element,this.constructor.DATA_KEY),m.off(this._element,this.constructor.EVENT_KEY);var e,t=_createForOfIteratorHelper(Object.getOwnPropertyNames(this));try{for(t.s();!(e=t.n()).done;)this[e.value]=null}catch(e){t.e(e)}finally{t.f()}}},{key:"_queueCallback",value:function(e,t){W(e,t,!(2<arguments.length&&void 0!==arguments[2])||arguments[2])}},{key:"_getConfig",value:function(e){return e=this._mergeConfigObj(e,this._element),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}}],[{key:"getInstance",value:function(e){return ue(s(e),this.DATA_KEY)}},{key:"getOrCreateInstance",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return this.getInstance(e)||new this(e,"object"===_typeof(t)?t:null)}},{key:"VERSION",get:function(){return"5.2.3"}},{key:"DATA_KEY",get:function(){return"bs.".concat(this.NAME)}},{key:"EVENT_KEY",get:function(){return".".concat(this.DATA_KEY)}},{key:"eventName",value:function(e){return"".concat(e).concat(this.EVENT_KEY)}}]),o}(),be=".".concat("bs.alert"),we="close".concat(be),ke="closed".concat(be),be=function(){_inherits(n,t);var e=_createSuper(n);function n(){return _classCallCheck(this,n),e.apply(this,arguments)}return _createClass(n,[{key:"close",value:function(){var e,t=this;m.trigger(this._element,we).defaultPrevented||(this._element.classList.remove("show"),e=this._element.classList.contains("fade"),this._queueCallback(function(){return t._destroyElement()},this._element,e))}},{key:"_destroyElement",value:function(){this._element.remove(),m.trigger(this._element,ke),this.dispose()}}],[{key:"NAME",get:function(){return"alert"}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=n.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError('No method named "'.concat(t,'"'));e[t](this)}})}}]),n}(),n=(he(be,"close"),e(be),".".concat("bs.button")),Ce='[data-bs-toggle="button"]',n="click".concat(n).concat(".data-api"),Se=function(){_inherits(n,t);var e=_createSuper(n);function n(){return _classCallCheck(this,n),e.apply(this,arguments)}return _createClass(n,[{key:"toggle",value:function(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}}],[{key:"NAME",get:function(){return"button"}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=n.getOrCreateInstance(this);"toggle"===t&&e[t]()})}}]),n}(),f=(m.on(document,n,Ce,function(e){e.preventDefault();e=e.target.closest(Ce);Se.getOrCreateInstance(e).toggle()}),e(Se),{find:function(e){var t,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:document.documentElement;return(t=[]).concat.apply(t,_toConsumableArray(Element.prototype.querySelectorAll.call(n,e)))},findOne:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:document.documentElement;return Element.prototype.querySelector.call(t,e)},children:function(e,t){var n;return(n=[]).concat.apply(n,_toConsumableArray(e.children)).filter(function(e){return e.matches(t)})},parents:function(e,t){for(var n=[],r=e.parentNode.closest(t);r;)n.push(r),r=r.parentNode.closest(t);return n},prev:function(e,t){for(var n=e.previousElementSibling;n;){if(n.matches(t))return[n];n=n.previousElementSibling}return[]},next:function(e,t){for(var n=e.nextElementSibling;n;){if(n.matches(t))return[n];n=n.nextElementSibling}return[]},focusableChildren:function(e){var t=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map(function(e){return"".concat(e,':not([tabindex^="-"])')}).join(",");return this.find(t,e).filter(function(e){return!c(e)&&i(e)})}}),d=".bs.swipe",Oe="touchstart".concat(d),xe="touchmove".concat(d),Le="touchend".concat(d),Ee="pointerdown".concat(d),Te="pointerup".concat(d),Ae={endCallback:null,leftCallback:null,rightCallback:null},je={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"},Pe=function(){_inherits(o,_e);var r=_createSuper(o);function o(e,t){var n;return _classCallCheck(this,o),((n=r.call(this))._element=e)&&o.isSupported()?(n._config=n._getConfig(t),n._deltaX=0,n._supportPointerEvents=Boolean(window.PointerEvent),n._initEvents(),n):_possibleConstructorReturn(n)}return _createClass(o,[{key:"dispose",value:function(){m.off(this._element,d)}},{key:"_start",value:function(e){this._supportPointerEvents?this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX):this._deltaX=e.touches[0].clientX}},{key:"_end",value:function(e){this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX-this._deltaX),this._handleSwipe(),l(this._config.endCallback)}},{key:"_move",value:function(e){this._deltaX=e.touches&&1<e.touches.length?0:e.touches[0].clientX-this._deltaX}},{key:"_handleSwipe",value:function(){var e=Math.abs(this._deltaX);e<=40||(e=e/this._deltaX,this._deltaX=0,e&&l(0<e?this._config.rightCallback:this._config.leftCallback))}},{key:"_initEvents",value:function(){var t=this;this._supportPointerEvents?(m.on(this._element,Ee,function(e){return t._start(e)}),m.on(this._element,Te,function(e){return t._end(e)}),this._element.classList.add("pointer-event")):(m.on(this._element,Oe,function(e){return t._start(e)}),m.on(this._element,xe,function(e){return t._move(e)}),m.on(this._element,Le,function(e){return t._end(e)}))}},{key:"_eventIsPointerPenTouch",value:function(e){return this._supportPointerEvents&&("pen"===e.pointerType||"touch"===e.pointerType)}}],[{key:"Default",get:function(){return Ae}},{key:"DefaultType",get:function(){return je}},{key:"NAME",get:function(){return"swipe"}},{key:"isSupported",value:function(){return"ontouchstart"in document.documentElement||0<navigator.maxTouchPoints}}]),o}(),n=".".concat("bs.carousel"),p=".data-api",Ie="next",h="prev",Be="left",De="right",Ne="slide".concat(n),qe="slid".concat(n),Me="keydown".concat(n),Fe="mouseenter".concat(n),He="mouseleave".concat(n),Re="dragstart".concat(n),v="load".concat(n).concat(p),n="click".concat(n).concat(p),We="carousel",Ve="active",ze=".active",Ge=".carousel-item",Ke=(_defineProperty(p={},"ArrowLeft",De),_defineProperty(p,"ArrowRight",Be),p),Ye={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},Ue={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"},Xe=function(){_inherits(r,t);var n=_createSuper(r);function r(e,t){return _classCallCheck(this,r),(e=n.call(this,e,t))._interval=null,e._activeElement=null,e._isSliding=!1,e.touchTimeout=null,e._swipeHelper=null,e._indicatorsElement=f.findOne(".carousel-indicators",e._element),e._addEventListeners(),e._config.ride===We&&e.cycle(),e}return _createClass(r,[{key:"next",value:function(){this._slide(Ie)}},{key:"nextWhenVisible",value:function(){!document.hidden&&i(this._element)&&this.next()}},{key:"prev",value:function(){this._slide(h)}},{key:"pause",value:function(){this._isSliding&&q(this._element),this._clearInterval()}},{key:"cycle",value:function(){var e=this;this._clearInterval(),this._updateInterval(),this._interval=setInterval(function(){return e.nextWhenVisible()},this._config.interval)}},{key:"_maybeEnableCycle",value:function(){var e=this;this._config.ride&&(this._isSliding?m.one(this._element,qe,function(){return e.cycle()}):this.cycle())}},{key:"to",value:function(e){var t,n=this,r=this._getItems();e>r.length-1||e<0||(this._isSliding?m.one(this._element,qe,function(){return n.to(e)}):(t=this._getItemIndex(this._getActive()))!==e&&this._slide(t<e?Ie:h,r[e]))}},{key:"dispose",value:function(){this._swipeHelper&&this._swipeHelper.dispose(),_get(_getPrototypeOf(r.prototype),"dispose",this).call(this)}},{key:"_configAfterMerge",value:function(e){return e.defaultInterval=e.interval,e}},{key:"_addEventListeners",value:function(){var t=this;this._config.keyboard&&m.on(this._element,Me,function(e){return t._keydown(e)}),"hover"===this._config.pause&&(m.on(this._element,Fe,function(){return t.pause()}),m.on(this._element,He,function(){return t._maybeEnableCycle()})),this._config.touch&&Pe.isSupported()&&this._addTouchEventListeners()}},{key:"_addTouchEventListeners",value:function(){var e,t=this,n=_createForOfIteratorHelper(f.find(".carousel-item img",this._element));try{for(n.s();!(e=n.n()).done;){var r=e.value;m.on(r,Re,function(e){return e.preventDefault()})}}catch(e){n.e(e)}finally{n.f()}this._swipeHelper=new Pe(this._element,{leftCallback:function(){return t._slide(t._directionToOrder(Be))},rightCallback:function(){return t._slide(t._directionToOrder(De))},endCallback:function(){"hover"===t._config.pause&&(t.pause(),t.touchTimeout&&clearTimeout(t.touchTimeout),t.touchTimeout=setTimeout(function(){return t._maybeEnableCycle()},500+t._config.interval))}})}},{key:"_keydown",value:function(e){var t;/input|textarea/i.test(e.target.tagName)||(t=Ke[e.key])&&(e.preventDefault(),this._slide(this._directionToOrder(t)))}},{key:"_getItemIndex",value:function(e){return this._getItems().indexOf(e)}},{key:"_setActiveIndicatorElement",value:function(e){var t;this._indicatorsElement&&((t=f.findOne(ze,this._indicatorsElement)).classList.remove(Ve),t.removeAttribute("aria-current"),t=f.findOne('[data-bs-slide-to="'.concat(e,'"]'),this._indicatorsElement))&&(t.classList.add(Ve),t.setAttribute("aria-current","true"))}},{key:"_updateInterval",value:function(){var e=this._activeElement||this._getActive();e&&(e=Number.parseInt(e.getAttribute("data-bs-interval"),10),this._config.interval=e||this._config.defaultInterval)}},{key:"_slide",value:function(t){var n,e,r,o,i,a,s,c=this,l=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;this._isSliding||(n=this._getActive(),e=t===Ie,(r=l||V(this._getItems(),n,e,this._config.wrap))===n)||(o=this._getItemIndex(r),(i=function(e){return m.trigger(c._element,e,{relatedTarget:r,direction:c._orderToDirection(t),from:c._getItemIndex(n),to:o})})(Ne).defaultPrevented)||n&&r&&(l=Boolean(this._interval),this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(o),this._activeElement=r,a=e?"carousel-item-start":"carousel-item-end",s=e?"carousel-item-next":"carousel-item-prev",r.classList.add(s),H(r),n.classList.add(a),r.classList.add(a),this._queueCallback(function(){r.classList.remove(a,s),r.classList.add(Ve),n.classList.remove(Ve,s,a),c._isSliding=!1,i(qe)},n,this._isAnimated()),l)&&this.cycle()}},{key:"_isAnimated",value:function(){return this._element.classList.contains("slide")}},{key:"_getActive",value:function(){return f.findOne(".active.carousel-item",this._element)}},{key:"_getItems",value:function(){return f.find(Ge,this._element)}},{key:"_clearInterval",value:function(){this._interval&&(clearInterval(this._interval),this._interval=null)}},{key:"_directionToOrder",value:function(e){return o()?e===Be?h:Ie:e===Be?Ie:h}},{key:"_orderToDirection",value:function(e){return o()?e===h?Be:De:e===h?De:Be}}],[{key:"Default",get:function(){return Ye}},{key:"DefaultType",get:function(){return Ue}},{key:"NAME",get:function(){return"carousel"}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=r.getOrCreateInstance(this,t);if("number"==typeof t)e.to(t);else if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError('No method named "'.concat(t,'"'));e[t]()}})}}]),r}(),p=(m.on(document,n,"[data-bs-slide], [data-bs-slide-to]",function(e){var t=a(this);t&&t.classList.contains(We)&&(e.preventDefault(),e=Xe.getOrCreateInstance(t),(t=this.getAttribute("data-bs-slide-to"))?e.to(t):"next"===ge(this,"slide")?e.next():e.prev(),e._maybeEnableCycle())}),m.on(window,v,function(){var e,t=f.find('[data-bs-ride="carousel"]'),n=_createForOfIteratorHelper(t);try{for(n.s();!(e=n.n()).done;){var r=e.value;Xe.getOrCreateInstance(r)}}catch(e){n.e(e)}finally{n.f()}}),e(Xe),".".concat("bs.collapse")),Qe="show".concat(p),Ze="shown".concat(p),$e="hide".concat(p),Je="hidden".concat(p),n="click".concat(p).concat(".data-api"),et="show",tt="collapse",nt="collapsing",rt=":scope .".concat(tt," .").concat(tt),ot='[data-bs-toggle="collapse"]',it={parent:null,toggle:!0},at={parent:"(null|element)",toggle:"boolean"},st=function(){_inherits(l,t);var c=_createSuper(l);function l(e,t){_classCallCheck(this,l),(n=c.call(this,e,t))._isTransitioning=!1,n._triggerArray=[];var n,r,e=f.find(ot),o=_createForOfIteratorHelper(e);try{for(o.s();!(r=o.n()).done;){var i=r.value,a=N(i),s=f.find(a).filter(function(e){return e===n._element});null!==a&&s.length&&n._triggerArray.push(i)}}catch(e){o.e(e)}finally{o.f()}return n._initializeChildren(),n._config.parent||n._addAriaAndCollapsedClass(n._triggerArray,n._isShown()),n._config.toggle&&n.toggle(),n}return _createClass(l,[{key:"toggle",value:function(){this._isShown()?this.hide():this.show()}},{key:"show",value:function(){var t=this;if(!this._isTransitioning&&!this._isShown()){var e=[];if(!(e=this._config.parent?this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter(function(e){return e!==t._element}).map(function(e){return l.getOrCreateInstance(e,{toggle:!1})}):e).length||!e[0]._isTransitioning){var n=m.trigger(this._element,Qe);if(!n.defaultPrevented){var r,o=_createForOfIteratorHelper(e);try{for(o.s();!(r=o.n()).done;)r.value.hide()}catch(e){o.e(e)}finally{o.f()}var i=this._getDimension(),n=(this._element.classList.remove(tt),this._element.classList.add(nt),this._element.style[i]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0,i[0].toUpperCase()+i.slice(1)),e="scroll".concat(n);this._queueCallback(function(){t._isTransitioning=!1,t._element.classList.remove(nt),t._element.classList.add(tt,et),t._element.style[i]="",m.trigger(t._element,Ze)},this._element,!0),this._element.style[i]="".concat(this._element[e],"px")}}}}},{key:"hide",value:function(){var e=this;if(!this._isTransitioning&&this._isShown()){var t=m.trigger(this._element,$e);if(!t.defaultPrevented){var n,t=this._getDimension(),r=(this._element.style[t]="".concat(this._element.getBoundingClientRect()[t],"px"),H(this._element),this._element.classList.add(nt),this._element.classList.remove(tt,et),_createForOfIteratorHelper(this._triggerArray));try{for(r.s();!(n=r.n()).done;){var o=n.value,i=a(o);i&&!this._isShown(i)&&this._addAriaAndCollapsedClass([o],!1)}}catch(e){r.e(e)}finally{r.f()}this._isTransitioning=!0;this._element.style[t]="",this._queueCallback(function(){e._isTransitioning=!1,e._element.classList.remove(nt),e._element.classList.add(tt),m.trigger(e._element,Je)},this._element,!0)}}}},{key:"_isShown",value:function(){return(0<arguments.length&&void 0!==arguments[0]?arguments[0]:this._element).classList.contains(et)}},{key:"_configAfterMerge",value:function(e){return e.toggle=Boolean(e.toggle),e.parent=s(e.parent),e}},{key:"_getDimension",value:function(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}},{key:"_initializeChildren",value:function(){if(this._config.parent){var e,t=this._getFirstLevelChildren(ot),n=_createForOfIteratorHelper(t);try{for(n.s();!(e=n.n()).done;){var r=e.value,o=a(r);o&&this._addAriaAndCollapsedClass([r],this._isShown(o))}}catch(e){n.e(e)}finally{n.f()}}}},{key:"_getFirstLevelChildren",value:function(e){var t=f.find(rt,this._config.parent);return f.find(e,this._config.parent).filter(function(e){return!t.includes(e)})}},{key:"_addAriaAndCollapsedClass",value:function(e,t){if(e.length){var n,r=_createForOfIteratorHelper(e);try{for(r.s();!(n=r.n()).done;){var o=n.value;o.classList.toggle("collapsed",!t),o.setAttribute("aria-expanded",t)}}catch(e){r.e(e)}finally{r.f()}}}}],[{key:"Default",get:function(){return it}},{key:"DefaultType",get:function(){return at}},{key:"NAME",get:function(){return"collapse"}},{key:"jQueryInterface",value:function(t){var n={};return"string"==typeof t&&/show|hide/.test(t)&&(n.toggle=!1),this.each(function(){var e=l.getOrCreateInstance(this,n);if("string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'.concat(t,'"'));e[t]()}})}}]),l}(),L=(m.on(document,n,ot,function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();var t,e=N(this),e=f.find(e),n=_createForOfIteratorHelper(e);try{for(n.s();!(t=n.n()).done;){var r=t.value;st.getOrCreateInstance(r,{toggle:!1}).toggle()}}catch(e){n.e(e)}finally{n.f()}}),e(st),"top"),E="bottom",T="right",A="left",ct="auto",lt=[L,E,T,A],j="start",ut="end",ft="clippingParents",dt="viewport",pt="popper",ht="reference",mt=lt.reduce(function(e,t){return e.concat([t+"-"+j,t+"-"+ut])},[]),vt=[].concat(lt,[ct]).reduce(function(e,t){return e.concat([t,t+"-"+j,t+"-"+ut])},[]),v="beforeRead",p="afterRead",n="beforeMain",yt="afterMain",gt="beforeWrite",_t="afterWrite",bt=[v,"read",p,n,"main",yt,gt,"write",_t];function y(e){return e?(e.nodeName||"").toLowerCase():null}function _(e){var t;return null==e?window:"[object Window]"!==e.toString()?(t=e.ownerDocument)&&t.defaultView||window:e}function g(e){return e instanceof _(e).Element||e instanceof Element}function b(e){return e instanceof _(e).HTMLElement||e instanceof HTMLElement}function wt(e){return"undefined"!=typeof ShadowRoot&&(e instanceof _(e).ShadowRoot||e instanceof ShadowRoot)}var w={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var o=e.state;Object.keys(o.elements).forEach(function(e){var t=o.styles[e]||{},n=o.attributes[e]||{},r=o.elements[e];b(r)&&y(r)&&(Object.assign(r.style,t),Object.keys(n).forEach(function(e){var t=n[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)}))})},effect:function(e){var r=e.state,o={popper:{position:r.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(r.elements.popper.style,o.popper),r.styles=o,r.elements.arrow&&Object.assign(r.elements.arrow.style,o.arrow),function(){Object.keys(r.elements).forEach(function(e){var t=r.elements[e],n=r.attributes[e]||{},e=Object.keys((r.styles.hasOwnProperty(e)?r.styles:o)[e]).reduce(function(e,t){return e[t]="",e},{});b(t)&&y(t)&&(Object.assign(t.style,e),Object.keys(n).forEach(function(e){t.removeAttribute(e)}))})}},requires:["computeStyles"]};function P(e){return e.split("-")[0]}var x=Math.max,kt=Math.min,Ct=Math.round;function St(){var e=navigator.userAgentData;return null!=e&&e.brands?e.brands.map(function(e){return e.brand+"/"+e.version}).join(" "):navigator.userAgent}function Ot(){return!/^((?!chrome|android).)*safari/i.test(St())}function xt(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!1);var r=e.getBoundingClientRect(),o=1,i=1;t&&b(e)&&(o=0<e.offsetWidth&&Ct(r.width)/e.offsetWidth||1,i=0<e.offsetHeight&&Ct(r.height)/e.offsetHeight||1);t=(g(e)?_(e):window).visualViewport,e=!Ot()&&n,n=(r.left+(e&&t?t.offsetLeft:0))/o,e=(r.top+(e&&t?t.offsetTop:0))/i,t=r.width/o,o=r.height/i;return{width:t,height:o,top:e,right:n+t,bottom:e+o,left:n,x:n,y:e}}function Lt(e){var t=xt(e),n=e.offsetWidth,r=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-r)<=1&&(r=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:r}}function Et(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&wt(n)){var r=t;do{if(r&&e.isSameNode(r))return!0}while(r=r.parentNode||r.host)}return!1}function k(e){return _(e).getComputedStyle(e)}function C(e){return((g(e)?e.ownerDocument:e.document)||window.document).documentElement}function Tt(e){return"html"===y(e)?e:e.assignedSlot||e.parentNode||(wt(e)?e.host:null)||C(e)}function At(e){return b(e)&&"fixed"!==k(e).position?e.offsetParent:null}function jt(e){for(var t,n=_(e),r=At(e);r&&(t=r,0<=["table","td","th"].indexOf(y(t)))&&"static"===k(r).position;)r=At(r);return(!r||"html"!==y(r)&&("body"!==y(r)||"static"!==k(r).position))&&(r||function(e){var t=/firefox/i.test(St()),n=/Trident/i.test(St());if(!n||!b(e)||"fixed"!==k(e).position){var r=Tt(e);for(wt(r)&&(r=r.host);b(r)&&["html","body"].indexOf(y(r))<0;){var o=k(r);if("none"!==o.transform||"none"!==o.perspective||"paint"===o.contain||-1!==["transform","perspective"].indexOf(o.willChange)||t&&"filter"===o.willChange||t&&o.filter&&"none"!==o.filter)return r;r=r.parentNode}}return null}(e))||n}function Pt(e){return 0<=["top","bottom"].indexOf(e)?"x":"y"}function It(e,t,n){return x(e,kt(t,n))}function Bt(){return{top:0,right:0,bottom:0,left:0}}function Dt(e){return Object.assign({},Bt(),e)}function Nt(n,e){return e.reduce(function(e,t){return e[t]=n,e},{})}var qt={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n,r,o,i=e.state,a=e.name,e=e.options,s=i.elements.arrow,c=i.modifiersData.popperOffsets,l=Pt(u=P(i.placement)),u=0<=[A,T].indexOf(u)?"height":"width";s&&c&&(e=e.padding,n=i,n=Dt("number"!=typeof(e="function"==typeof e?e(Object.assign({},n.rects,{placement:n.placement})):e)?e:Nt(e,lt)),e=Lt(s),o="y"===l?L:A,r="y"===l?E:T,t=i.rects.reference[u]+i.rects.reference[l]-c[l]-i.rects.popper[u],c=c[l]-i.rects.reference[l],s=(s=jt(s))?"y"===l?s.clientHeight||0:s.clientWidth||0:0,o=n[o],n=s-e[u]-n[r],o=It(o,r=s/2-e[u]/2+(t/2-c/2),n),i.modifiersData[a]=((s={})[l]=o,s.centerOffset=o-r,s))},effect:function(e){var t=e.state;null!=(e=void 0===(e=e.options.element)?"[data-popper-arrow]":e)&&("string"!=typeof e||(e=t.elements.popper.querySelector(e)))&&Et(t.elements.popper,e)&&(t.elements.arrow=e)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function Mt(e){return e.split("-")[1]}var Ft={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Ht(e){var t,n,r,o=e.popper,i=e.popperRect,a=e.placement,s=e.variation,c=e.offsets,l=e.position,u=e.gpuAcceleration,f=e.adaptive,d=e.roundOffsets,e=e.isFixed,p=c.x,p=void 0===p?0:p,h=c.y,h=void 0===h?0:h,m="function"==typeof d?d({x:p,y:h}):{x:p,y:h},m=(p=m.x,h=m.y,c.hasOwnProperty("x")),c=c.hasOwnProperty("y"),v=A,y=L,g=window,o=(f&&(n="clientHeight",t="clientWidth",(r=jt(o))===_(o)&&"static"!==k(r=C(o)).position&&"absolute"===l&&(n="scrollHeight",t="scrollWidth"),a!==L&&(a!==A&&a!==T||s!==ut)||(y=E,h=(h-((e&&r===g&&g.visualViewport?g.visualViewport.height:r[n])-i.height))*(u?1:-1)),a!==A&&(a!==L&&a!==E||s!==ut)||(v=T,p=(p-((e&&r===g&&g.visualViewport?g.visualViewport.width:r[t])-i.width))*(u?1:-1))),Object.assign({position:l},f&&Ft)),e=!0===d?(a=(n={x:p,y:h}).x,n=n.y,s=window.devicePixelRatio||1,{x:Ct(a*s)/s||0,y:Ct(n*s)/s||0}):{x:p,y:h};return p=e.x,h=e.y,u?Object.assign({},o,((r={})[y]=c?"0":"",r[v]=m?"0":"",r.transform=(g.devicePixelRatio||1)<=1?"translate("+p+"px, "+h+"px)":"translate3d("+p+"px, "+h+"px, 0)",r)):Object.assign({},o,((t={})[y]=c?h+"px":"",t[v]=m?p+"px":"",t.transform="",t))}var Rt={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,e=e.options,n=void 0===(n=e.gpuAcceleration)||n,r=void 0===(r=e.adaptive)||r,e=void 0===(e=e.roundOffsets)||e,n={placement:P(t.placement),variation:Mt(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:n,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,Ht(Object.assign({},n,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:r,roundOffsets:e})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,Ht(Object.assign({},n,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:e})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}},Wt={passive:!0};var Vt={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,r=(e=e.options).scroll,o=void 0===r||r,i=void 0===(r=e.resize)||r,a=_(t.elements.popper),s=[].concat(t.scrollParents.reference,t.scrollParents.popper);return o&&s.forEach(function(e){e.addEventListener("scroll",n.update,Wt)}),i&&a.addEventListener("resize",n.update,Wt),function(){o&&s.forEach(function(e){e.removeEventListener("scroll",n.update,Wt)}),i&&a.removeEventListener("resize",n.update,Wt)}},data:{}},zt={left:"right",right:"left",bottom:"top",top:"bottom"};function Gt(e){return e.replace(/left|right|bottom|top/g,function(e){return zt[e]})}var Kt={start:"end",end:"start"};function Yt(e){return e.replace(/start|end/g,function(e){return Kt[e]})}function Ut(e){e=_(e);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function Xt(e){return xt(C(e)).left+Ut(e).scrollLeft}function Qt(e){var e=k(e),t=e.overflow,n=e.overflowX,e=e.overflowY;return/auto|scroll|overlay|hidden/.test(t+e+n)}function Zt(e,t){void 0===t&&(t=[]);var n=function e(t){return 0<=["html","body","#document"].indexOf(y(t))?t.ownerDocument.body:b(t)&&Qt(t)?t:e(Tt(t))}(e),e=n===(null==(e=e.ownerDocument)?void 0:e.body),r=_(n),r=e?[r].concat(r.visualViewport||[],Qt(n)?n:[]):n,n=t.concat(r);return e?n:n.concat(Zt(Tt(r)))}function $t(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function Jt(e,t,n){return t===dt?$t((o=n,a=_(r=e),s=C(r),a=a.visualViewport,c=s.clientWidth,s=s.clientHeight,u=l=0,a&&(c=a.width,s=a.height,(i=Ot())||!i&&"fixed"===o)&&(l=a.offsetLeft,u=a.offsetTop),{width:c,height:s,x:l+Xt(r),y:u})):g(t)?((o=xt(i=t,!1,"fixed"===(o=n))).top=o.top+i.clientTop,o.left=o.left+i.clientLeft,o.bottom=o.top+i.clientHeight,o.right=o.left+i.clientWidth,o.width=i.clientWidth,o.height=i.clientHeight,o.x=o.left,o.y=o.top,o):$t((a=C(e),c=C(a),s=Ut(a),l=null==(l=a.ownerDocument)?void 0:l.body,r=x(c.scrollWidth,c.clientWidth,l?l.scrollWidth:0,l?l.clientWidth:0),u=x(c.scrollHeight,c.clientHeight,l?l.scrollHeight:0,l?l.clientHeight:0),a=-s.scrollLeft+Xt(a),s=-s.scrollTop,"rtl"===k(l||c).direction&&(a+=x(c.clientWidth,l?l.clientWidth:0)-r),{width:r,height:u,x:a,y:s}));var r,o,i,a,s,c,l,u}function en(n,e,t,r){var o,i="clippingParents"===e?(a=Zt(Tt(i=n)),g(o=0<=["absolute","fixed"].indexOf(k(i).position)&&b(i)?jt(i):i)?a.filter(function(e){return g(e)&&Et(e,o)&&"body"!==y(e)}):[]):[].concat(e),a=[].concat(i,[t]),e=a[0],t=a.reduce(function(e,t){t=Jt(n,t,r);return e.top=x(t.top,e.top),e.right=kt(t.right,e.right),e.bottom=kt(t.bottom,e.bottom),e.left=x(t.left,e.left),e},Jt(n,e,r));return t.width=t.right-t.left,t.height=t.bottom-t.top,t.x=t.left,t.y=t.top,t}function tn(e){var t,n=e.reference,r=e.element,e=e.placement,o=e?P(e):null,e=e?Mt(e):null,i=n.x+n.width/2-r.width/2,a=n.y+n.height/2-r.height/2;switch(o){case L:t={x:i,y:n.y-r.height};break;case E:t={x:i,y:n.y+n.height};break;case T:t={x:n.x+n.width,y:a};break;case A:t={x:n.x-r.width,y:a};break;default:t={x:n.x,y:n.y}}var s=o?Pt(o):null;if(null!=s){var c="y"===s?"height":"width";switch(e){case j:t[s]=t[s]-(n[c]/2-r[c]/2);break;case ut:t[s]=t[s]+(n[c]/2-r[c]/2)}}return t}function nn(e,t){var r,t=t=void 0===t?{}:t,n=t.placement,n=void 0===n?e.placement:n,o=t.strategy,o=void 0===o?e.strategy:o,i=t.boundary,i=void 0===i?ft:i,a=t.rootBoundary,a=void 0===a?dt:a,s=t.elementContext,s=void 0===s?pt:s,c=t.altBoundary,c=void 0!==c&&c,t=t.padding,t=void 0===t?0:t,t=Dt("number"!=typeof t?t:Nt(t,lt)),l=e.rects.popper,c=e.elements[c?s===pt?ht:pt:s],c=en(g(c)?c:c.contextElement||C(e.elements.popper),i,a,o),i=xt(e.elements.reference),a=tn({reference:i,element:l,strategy:"absolute",placement:n}),o=$t(Object.assign({},l,a)),l=s===pt?o:i,u={top:c.top-l.top+t.top,bottom:l.bottom-c.bottom+t.bottom,left:c.left-l.left+t.left,right:l.right-c.right+t.right},a=e.modifiersData.offset;return s===pt&&a&&(r=a[n],Object.keys(u).forEach(function(e){var t=0<=[T,E].indexOf(e)?1:-1,n=0<=[L,E].indexOf(e)?"y":"x";u[e]+=r[n]*t})),u}var rn={name:"flip",enabled:!0,phase:"main",fn:function(e){var f=e.state,t=e.options,e=e.name;if(!f.modifiersData[e]._skip){for(var n=t.mainAxis,r=void 0===n||n,n=t.altAxis,o=void 0===n||n,n=t.fallbackPlacements,d=t.padding,p=t.boundary,h=t.rootBoundary,i=t.altBoundary,a=t.flipVariations,m=void 0===a||a,v=t.allowedAutoPlacements,a=f.options.placement,t=P(a),n=n||(t===a||!m?[Gt(a)]:P(n=a)===ct?[]:(t=Gt(n),[Yt(n),t,Yt(t)])),s=[a].concat(n).reduce(function(e,t){return e.concat(P(t)===ct?(n=f,r=(e=e=void 0===(e={placement:t,boundary:p,rootBoundary:h,padding:d,flipVariations:m,allowedAutoPlacements:v})?{}:e).placement,o=e.boundary,i=e.rootBoundary,a=e.padding,s=e.flipVariations,c=void 0===(e=e.allowedAutoPlacements)?vt:e,l=Mt(r),e=l?s?mt:mt.filter(function(e){return Mt(e)===l}):lt,u=(r=0===(r=e.filter(function(e){return 0<=c.indexOf(e)})).length?e:r).reduce(function(e,t){return e[t]=nn(n,{placement:t,boundary:o,rootBoundary:i,padding:a})[P(t)],e},{}),Object.keys(u).sort(function(e,t){return u[e]-u[t]})):t);var n,r,o,i,a,s,c,l,u},[]),c=f.rects.reference,l=f.rects.popper,u=new Map,y=!0,g=s[0],_=0;_<s.length;_++){var b=s[_],w=P(b),k=Mt(b)===j,C=0<=[L,E].indexOf(w),S=C?"width":"height",O=nn(f,{placement:b,boundary:p,rootBoundary:h,altBoundary:i,padding:d}),C=C?k?T:A:k?E:L,k=(c[S]>l[S]&&(C=Gt(C)),Gt(C)),S=[];if(r&&S.push(O[w]<=0),o&&S.push(O[C]<=0,O[k]<=0),S.every(function(e){return e})){g=b,y=!1;break}u.set(b,S)}if(y)for(var x=m?3:1;0<x;x--)if("break"===function(t){var e=s.find(function(e){e=u.get(e);if(e)return e.slice(0,t).every(function(e){return e})});if(e)return g=e,"break"}(x))break;f.placement!==g&&(f.modifiersData[e]._skip=!0,f.placement=g,f.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function on(e,t,n){return{top:e.top-t.height-(n=void 0===n?{x:0,y:0}:n).y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function an(t){return[L,T,E,A].some(function(e){return 0<=t[e]})}var sn={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,e=e.name,n=t.rects.reference,r=t.rects.popper,o=t.modifiersData.preventOverflow,i=nn(t,{elementContext:"reference"}),a=nn(t,{altBoundary:!0}),i=on(i,n),n=on(a,r,o),a=an(i),r=an(n);t.modifiersData[e]={referenceClippingOffsets:i,popperEscapeOffsets:n,isReferenceHidden:a,hasPopperEscaped:r},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":a,"data-popper-escaped":r})}};var cn={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var a=e.state,t=e.options,e=e.name,s=void 0===(t=t.offset)?[0,0]:t,t=vt.reduce(function(e,t){var n,r,o,i;return e[t]=(t=t,n=a.rects,r=s,o=P(t),i=0<=[A,L].indexOf(o)?-1:1,t=(n="function"==typeof r?r(Object.assign({},n,{placement:t})):r)[0]||0,r=(n[1]||0)*i,0<=[A,T].indexOf(o)?{x:r,y:t}:{x:t,y:r}),e},{}),n=(r=t[a.placement]).x,r=r.y;null!=a.modifiersData.popperOffsets&&(a.modifiersData.popperOffsets.x+=n,a.modifiersData.popperOffsets.y+=r),a.modifiersData[e]=t}};var ln={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,e=e.name;t.modifiersData[e]=tn({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}};var un={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t,n,r,o,i,a,s,c,l,u=e.state,f=e.options,e=e.name,d=void 0===(d=f.mainAxis)||d,p=void 0!==(p=f.altAxis)&&p,h=f.boundary,m=f.rootBoundary,v=f.altBoundary,y=f.padding,g=void 0===(g=f.tether)||g,f=void 0===(f=f.tetherOffset)?0:f,h=nn(u,{boundary:h,rootBoundary:m,padding:y,altBoundary:v}),m=P(u.placement),v=!(y=Mt(u.placement)),_=Pt(m),b="x"===_?"y":"x",w=u.modifiersData.popperOffsets,k=u.rects.reference,C=u.rects.popper,f="number"==typeof(f="function"==typeof f?f(Object.assign({},u.rects,{placement:u.placement})):f)?{mainAxis:f,altAxis:f}:Object.assign({mainAxis:0,altAxis:0},f),S=u.modifiersData.offset?u.modifiersData.offset[u.placement]:null,O={x:0,y:0};w&&(d&&(d="y"===_?"height":"width",a=(s=w[_])+h[n="y"===_?L:A],c=s-h[l="y"===_?E:T],t=g?-C[d]/2:0,o=(y===j?k:C)[d],y=y===j?-C[d]:-k[d],i=u.elements.arrow,i=g&&i?Lt(i):{width:0,height:0},n=(r=u.modifiersData["arrow#persistent"]?u.modifiersData["arrow#persistent"].padding:Bt())[n],r=r[l],l=It(0,k[d],i[d]),i=v?k[d]/2-t-l-n-f.mainAxis:o-l-n-f.mainAxis,o=v?-k[d]/2+t+l+r+f.mainAxis:y+l+r+f.mainAxis,v=(n=u.elements.arrow&&jt(u.elements.arrow))?"y"===_?n.clientTop||0:n.clientLeft||0:0,y=s+o-(t=null!=(d=null==S?void 0:S[_])?d:0),l=It(g?kt(a,s+i-t-v):a,s,g?x(c,y):c),w[_]=l,O[_]=l-s),p&&(r="y"==b?"height":"width",o=(n=w[b])+h["x"===_?L:A],d=n-h["x"===_?E:T],i=-1!==[L,A].indexOf(m),v=null!=(t=null==S?void 0:S[b])?t:0,a=i?o:n-k[r]-C[r]-v+f.altAxis,y=i?n+k[r]+C[r]-v-f.altAxis:d,s=g&&i?(c=It(c=a,n,l=y),l<c?l:c):It(g?a:o,n,g?y:d),w[b]=s,O[b]=s-n),u.modifiersData[e]=O)},requiresIfExists:["offset"]};function fn(e,t,n){void 0===n&&(n=!1);var r=b(t),o=b(t)&&(a=(o=t).getBoundingClientRect(),i=Ct(a.width)/o.offsetWidth||1,a=Ct(a.height)/o.offsetHeight||1,1!==i||1!==a),i=C(t),a=xt(e,o,n),e={scrollLeft:0,scrollTop:0},s={x:0,y:0};return!r&&n||("body"===y(t)&&!Qt(i)||(e=(r=t)!==_(r)&&b(r)?{scrollLeft:r.scrollLeft,scrollTop:r.scrollTop}:Ut(r)),b(t)?((s=xt(t,!0)).x+=t.clientLeft,s.y+=t.clientTop):i&&(s.x=Xt(i))),{x:a.left+e.scrollLeft-s.x,y:a.top+e.scrollTop-s.y,width:a.width,height:a.height}}function dn(e){var n=new Map,r=new Set,o=[];return e.forEach(function(e){n.set(e.name,e)}),e.forEach(function(e){r.has(e.name)||!function t(e){r.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach(function(e){r.has(e)||(e=n.get(e))&&t(e)}),o.push(e)}(e)}),o}var pn={placement:"bottom",modifiers:[],strategy:"absolute"};function hn(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some(function(e){return!(e&&"function"==typeof e.getBoundingClientRect)})}function mn(e){var e=e=void 0===e?{}:e,t=e.defaultModifiers,f=void 0===t?[]:t,t=e.defaultOptions,d=void 0===t?pn:t;return function(r,o,t){void 0===t&&(t=d);var n,i,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},pn,d),modifiersData:{},elements:{reference:r,popper:o},attributes:{},styles:{}},s=[],c=!1,l={state:a,setOptions:function(e){var n,t,e="function"==typeof e?e(a.options):e,e=(u(),a.options=Object.assign({},d,a.options,e),a.scrollParents={reference:g(r)?Zt(r):r.contextElement?Zt(r.contextElement):[],popper:Zt(o)},e=[].concat(f,a.options.modifiers),t=e.reduce(function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e},{}),e=Object.keys(t).map(function(e){return t[e]}),n=dn(e),bt.reduce(function(e,t){return e.concat(n.filter(function(e){return e.phase===t}))},[]));return a.orderedModifiers=e.filter(function(e){return e.enabled}),a.orderedModifiers.forEach(function(e){var t=e.name,n=e.options,e=e.effect;"function"==typeof e&&(e=e({state:a,name:t,instance:l,options:void 0===n?{}:n}),s.push(e||function(){}))}),l.update()},forceUpdate:function(){if(!c){var e=a.elements,t=e.reference,e=e.popper;if(hn(t,e)){a.rects={reference:fn(t,jt(e),"fixed"===a.options.strategy),popper:Lt(e)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach(function(e){return a.modifiersData[e.name]=Object.assign({},e.data)});for(var n,r,o,i=0;i<a.orderedModifiers.length;i++)!0===a.reset?(a.reset=!1,i=-1):(n=(o=a.orderedModifiers[i]).fn,r=o.options,o=o.name,"function"==typeof n&&(a=n({state:a,options:void 0===r?{}:r,name:o,instance:l})||a))}}},update:(n=function(){return new Promise(function(e){l.forceUpdate(),e(a)})},function(){return i=i||new Promise(function(e){Promise.resolve().then(function(){i=void 0,e(n())})})}),destroy:function(){u(),c=!0}};return hn(r,o)&&l.setOptions(t).then(function(e){!c&&t.onFirstUpdate&&t.onFirstUpdate(e)}),l;function u(){s.forEach(function(e){return e()}),s=[]}}}var vn=mn({defaultModifiers:[Vt,ln,Rt,w,cn,rn,un,qt,sn]}),yn=Object.freeze(Object.defineProperty({__proto__:null,popperGenerator:mn,detectOverflow:nn,createPopperBase:mn(),createPopper:vn,createPopperLite:mn({defaultModifiers:[Vt,ln,Rt,w]}),top:L,bottom:E,right:T,left:A,auto:ct,basePlacements:lt,start:j,end:ut,clippingParents:ft,viewport:dt,popper:pt,reference:ht,variationPlacements:mt,placements:vt,beforeRead:v,read:"read",afterRead:p,beforeMain:n,main:"main",afterMain:yt,beforeWrite:gt,write:"write",afterWrite:_t,modifierPhases:bt,applyStyles:w,arrow:qt,computeStyles:Rt,eventListeners:Vt,flip:rn,hide:sn,offset:cn,popperOffsets:ln,preventOverflow:un},Symbol.toStringTag,{value:"Module"})),gn="dropdown",v=".".concat("bs.dropdown"),p=".data-api",_n="ArrowDown",bn="hide".concat(v),wn="hidden".concat(v),kn="show".concat(v),Cn="shown".concat(v),n="click".concat(v).concat(p),yt="keydown".concat(v).concat(p),gt="keyup".concat(v).concat(p),Sn="show",S='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',On="".concat(S,".").concat(Sn),xn=".dropdown-menu",Ln=o()?"top-end":"top-start",En=o()?"top-start":"top-end",Tn=o()?"bottom-end":"bottom-start",An=o()?"bottom-start":"bottom-end",jn=o()?"left-start":"right-start",Pn=o()?"right-start":"left-start",In={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},Bn={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"},O=function(){_inherits(l,t);var n=_createSuper(l);function l(e,t){return _classCallCheck(this,l),(e=n.call(this,e,t))._popper=null,e._parent=e._element.parentNode,e._menu=f.next(e._element,xn)[0]||f.prev(e._element,xn)[0]||f.findOne(xn,e._parent),e._inNavbar=e._detectNavbar(),e}return _createClass(l,[{key:"toggle",value:function(){return this._isShown()?this.hide():this.show()}},{key:"show",value:function(){if(!c(this._element)&&!this._isShown()){var e={relatedTarget:this._element},t=m.trigger(this._element,kn,e);if(!t.defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav")){var n,r=_createForOfIteratorHelper((t=[]).concat.apply(t,_toConsumableArray(document.body.children)));try{for(r.s();!(n=r.n()).done;){var o=n.value;m.on(o,"mouseover",F)}}catch(e){r.e(e)}finally{r.f()}}this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(Sn),this._element.classList.add(Sn),m.trigger(this._element,Cn,e)}}}},{key:"hide",value:function(){var e;!c(this._element)&&this._isShown()&&(e={relatedTarget:this._element},this._completeHide(e))}},{key:"dispose",value:function(){this._popper&&this._popper.destroy(),_get(_getPrototypeOf(l.prototype),"dispose",this).call(this)}},{key:"update",value:function(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}},{key:"_completeHide",value:function(e){var t=m.trigger(this._element,bn,e);if(!t.defaultPrevented){if("ontouchstart"in document.documentElement){var n,r=_createForOfIteratorHelper((t=[]).concat.apply(t,_toConsumableArray(document.body.children)));try{for(r.s();!(n=r.n()).done;){var o=n.value;m.off(o,"mouseover",F)}}catch(e){r.e(e)}finally{r.f()}}this._popper&&this._popper.destroy(),this._menu.classList.remove(Sn),this._element.classList.remove(Sn),this._element.setAttribute("aria-expanded","false"),ve(this._menu,"popper"),m.trigger(this._element,wn,e)}}},{key:"_getConfig",value:function(e){if(e=_get(_getPrototypeOf(l.prototype),"_getConfig",this).call(this,e),"object"!==_typeof(e.reference)||u(e.reference)||"function"==typeof e.reference.getBoundingClientRect)return e;throw new TypeError("".concat(gn.toUpperCase(),': Option "reference" provided type "object" without a required "getBoundingClientRect" method.'))}},{key:"_createPopper",value:function(){if(void 0===yn)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");var e=this._element,t=("parent"===this._config.reference?e=this._parent:u(this._config.reference)?e=s(this._config.reference):"object"===_typeof(this._config.reference)&&(e=this._config.reference),this._getPopperConfig());this._popper=vn(e,this._menu,t)}},{key:"_isShown",value:function(){return this._menu.classList.contains(Sn)}},{key:"_getPlacement",value:function(){var e,t=this._parent;return t.classList.contains("dropend")?jn:t.classList.contains("dropstart")?Pn:t.classList.contains("dropup-center")?"top":t.classList.contains("dropdown-center")?"bottom":(e="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim(),t.classList.contains("dropup")?e?En:Ln:e?An:Tn)}},{key:"_detectNavbar",value:function(){return null!==this._element.closest(".navbar")}},{key:"_getOffset",value:function(){var t=this,n=this._config.offset;return"string"==typeof n?n.split(",").map(function(e){return Number.parseInt(e,10)}):"function"==typeof n?function(e){return n(e,t._element)}:n}},{key:"_getPopperConfig",value:function(){var e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return!this._inNavbar&&"static"!==this._config.display||(me(this._menu,"popper","static"),e.modifiers=[{name:"applyStyles",enabled:!1}]),_objectSpread(_objectSpread({},e),"function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig)}},{key:"_selectMenuItem",value:function(e){var t=e.key,e=e.target,n=f.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter(i);n.length&&V(n,e,t===_n,!n.includes(e)).focus()}}],[{key:"Default",get:function(){return In}},{key:"DefaultType",get:function(){return Bn}},{key:"NAME",get:function(){return gn}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=l.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'.concat(t,'"'));e[t]()}})}},{key:"clearMenus",value:function(e){if(2!==e.button&&("keyup"!==e.type||"Tab"===e.key)){var t,n=f.find(On),r=_createForOfIteratorHelper(n);try{for(r.s();!(t=r.n()).done;){var o,i,a,s=t.value,c=l.getInstance(s);c&&!1!==c._config.autoClose&&(i=(o=e.composedPath()).includes(c._menu),o.includes(c._element)||"inside"===c._config.autoClose&&!i||"outside"===c._config.autoClose&&i||c._menu.contains(e.target)&&("keyup"===e.type&&"Tab"===e.key||/input|select|option|textarea|form/i.test(e.target.tagName))||(a={relatedTarget:c._element},"click"===e.type&&(a.clickEvent=e),c._completeHide(a)))}}catch(e){r.e(e)}finally{r.f()}}}},{key:"dataApiKeydownHandler",value:function(e){var t=/input|textarea/i.test(e.target.tagName),n="Escape"===e.key,r=["ArrowUp",_n].includes(e.key);!r&&!n||t&&!n||(e.preventDefault(),t=this.matches(S)?this:f.prev(this,S)[0]||f.next(this,S)[0]||f.findOne(S,e.delegateTarget.parentNode),n=l.getOrCreateInstance(t),r?(e.stopPropagation(),n.show(),n._selectMenuItem(e)):n._isShown()&&(e.stopPropagation(),n.hide(),t.focus()))}}]),l}(),Dn=(m.on(document,yt,S,O.dataApiKeydownHandler),m.on(document,yt,xn,O.dataApiKeydownHandler),m.on(document,n,O.clearMenus),m.on(document,gt,O.clearMenus),m.on(document,n,S,function(e){e.preventDefault(),O.getOrCreateInstance(this).toggle()}),e(O),".fixed-top, .fixed-bottom, .is-fixed, .sticky-top"),Nn=".sticky-top",qn="padding-right",Mn="margin-right",Fn=function(){function e(){_classCallCheck(this,e),this._element=document.body}return _createClass(e,[{key:"getWidth",value:function(){var e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}},{key:"hide",value:function(){var t=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,qn,function(e){return e+t}),this._setElementAttributes(Dn,qn,function(e){return e+t}),this._setElementAttributes(Nn,Mn,function(e){return e-t})}},{key:"reset",value:function(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,qn),this._resetElementAttributes(Dn,qn),this._resetElementAttributes(Nn,Mn)}},{key:"isOverflowing",value:function(){return 0<this.getWidth()}},{key:"_disableOverFlow",value:function(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}},{key:"_setElementAttributes",value:function(e,n,r){var o=this,i=this.getWidth();this._applyManipulationCallback(e,function(e){var t;e!==o._element&&window.innerWidth>e.clientWidth+i||(o._saveInitialAttribute(e,n),t=window.getComputedStyle(e).getPropertyValue(n),e.style.setProperty(n,"".concat(r(Number.parseFloat(t)),"px")))})}},{key:"_saveInitialAttribute",value:function(e,t){var n=e.style.getPropertyValue(t);n&&me(e,t,n)}},{key:"_resetElementAttributes",value:function(e,n){this._applyManipulationCallback(e,function(e){var t=ge(e,n);null===t?e.style.removeProperty(n):(ve(e,n),e.style.setProperty(n,t))})}},{key:"_applyManipulationCallback",value:function(e,t){if(u(e))t(e);else{var n,r=_createForOfIteratorHelper(f.find(e,this._element));try{for(r.s();!(n=r.n()).done;)t(n.value)}catch(e){r.e(e)}finally{r.f()}}}}]),e}(),Hn="backdrop",Rn="mousedown.bs.".concat(Hn),Wn={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},Vn={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"},zn=function(){_inherits(r,_e);var n=_createSuper(r);function r(e){var t;return _classCallCheck(this,r),(t=n.call(this))._config=t._getConfig(e),t._isAppended=!1,t._element=null,t}return _createClass(r,[{key:"show",value:function(e){var t;this._config.isVisible?(this._append(),t=this._getElement(),this._config.isAnimated&&H(t),t.classList.add("show"),this._emulateAnimation(function(){l(e)})):l(e)}},{key:"hide",value:function(e){var t=this;this._config.isVisible?(this._getElement().classList.remove("show"),this._emulateAnimation(function(){t.dispose(),l(e)})):l(e)}},{key:"dispose",value:function(){this._isAppended&&(m.off(this._element,Rn),this._element.remove(),this._isAppended=!1)}},{key:"_getElement",value:function(){var e;return this._element||((e=document.createElement("div")).className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e),this._element}},{key:"_configAfterMerge",value:function(e){return e.rootElement=s(e.rootElement),e}},{key:"_append",value:function(){var e,t=this;this._isAppended||(e=this._getElement(),this._config.rootElement.append(e),m.on(e,Rn,function(){l(t._config.clickCallback)}),this._isAppended=!0)}},{key:"_emulateAnimation",value:function(e){W(e,this._getElement(),this._config.isAnimated)}}],[{key:"Default",get:function(){return Wn}},{key:"DefaultType",get:function(){return Vn}},{key:"NAME",get:function(){return Hn}}]),r}(),Gn=".".concat("bs.focustrap"),Kn="focusin".concat(Gn),Yn="keydown.tab".concat(Gn),Un="backward",Xn={autofocus:!0,trapElement:null},Qn={autofocus:"boolean",trapElement:"element"},Zn=function(){_inherits(r,_e);var n=_createSuper(r);function r(e){var t;return _classCallCheck(this,r),(t=n.call(this))._config=t._getConfig(e),t._isActive=!1,t._lastTabNavDirection=null,t}return _createClass(r,[{key:"activate",value:function(){var t=this;this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),m.off(document,Gn),m.on(document,Kn,function(e){return t._handleFocusin(e)}),m.on(document,Yn,function(e){return t._handleKeydown(e)}),this._isActive=!0)}},{key:"deactivate",value:function(){this._isActive&&(this._isActive=!1,m.off(document,Gn))}},{key:"_handleFocusin",value:function(e){var t=this._config.trapElement;e.target===document||e.target===t||t.contains(e.target)||(0===(e=f.focusableChildren(t)).length?t:this._lastTabNavDirection===Un?e[e.length-1]:e[0]).focus()}},{key:"_handleKeydown",value:function(e){"Tab"===e.key&&(this._lastTabNavDirection=e.shiftKey?Un:"forward")}}],[{key:"Default",get:function(){return Xn}},{key:"DefaultType",get:function(){return Qn}},{key:"NAME",get:function(){return"focustrap"}}]),r}(),I=".".concat("bs.modal"),$n="hide".concat(I),Jn="hidePrevented".concat(I),er="hidden".concat(I),tr="show".concat(I),nr="shown".concat(I),rr="resize".concat(I),or="click.dismiss".concat(I),ir="mousedown.dismiss".concat(I),ar="keydown.dismiss".concat(I),_t="click".concat(I).concat(".data-api"),sr="modal-open",cr="modal-static",lr={backdrop:!0,focus:!0,keyboard:!0},ur={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"},fr=function(){_inherits(r,t);var n=_createSuper(r);function r(e,t){return _classCallCheck(this,r),(e=n.call(this,e,t))._dialog=f.findOne(".modal-dialog",e._element),e._backdrop=e._initializeBackDrop(),e._focustrap=e._initializeFocusTrap(),e._isShown=!1,e._isTransitioning=!1,e._scrollBar=new Fn,e._addEventListeners(),e}return _createClass(r,[{key:"toggle",value:function(e){return this._isShown?this.hide():this.show(e)}},{key:"show",value:function(e){var t=this;this._isShown||this._isTransitioning||m.trigger(this._element,tr,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(sr),this._adjustDialog(),this._backdrop.show(function(){return t._showElement(e)}))}},{key:"hide",value:function(){var e=this;!this._isShown||this._isTransitioning||m.trigger(this._element,$n).defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove("show"),this._queueCallback(function(){return e._hideModal()},this._element,this._isAnimated()))}},{key:"dispose",value:function(){for(var e=0,t=[window,this._dialog];e<t.length;e++)m.off(t[e],I);this._backdrop.dispose(),this._focustrap.deactivate(),_get(_getPrototypeOf(r.prototype),"dispose",this).call(this)}},{key:"handleUpdate",value:function(){this._adjustDialog()}},{key:"_initializeBackDrop",value:function(){return new zn({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}},{key:"_initializeFocusTrap",value:function(){return new Zn({trapElement:this._element})}},{key:"_showElement",value:function(e){var t=this,n=(document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,f.findOne(".modal-body",this._dialog));n&&(n.scrollTop=0),H(this._element),this._element.classList.add("show");this._queueCallback(function(){t._config.focus&&t._focustrap.activate(),t._isTransitioning=!1,m.trigger(t._element,nr,{relatedTarget:e})},this._dialog,this._isAnimated())}},{key:"_addEventListeners",value:function(){var n=this;m.on(this._element,ar,function(e){"Escape"===e.key&&(n._config.keyboard?(e.preventDefault(),n.hide()):n._triggerBackdropTransition())}),m.on(window,rr,function(){n._isShown&&!n._isTransitioning&&n._adjustDialog()}),m.on(this._element,ir,function(t){m.one(n._element,or,function(e){n._element===t.target&&n._element===e.target&&("static"===n._config.backdrop?n._triggerBackdropTransition():n._config.backdrop&&n.hide())})})}},{key:"_hideModal",value:function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide(function(){document.body.classList.remove(sr),e._resetAdjustments(),e._scrollBar.reset(),m.trigger(e._element,er)})}},{key:"_isAnimated",value:function(){return this._element.classList.contains("fade")}},{key:"_triggerBackdropTransition",value:function(){var e,t,n=this;m.trigger(this._element,Jn).defaultPrevented||(e=this._element.scrollHeight>document.documentElement.clientHeight,"hidden"===(t=this._element.style.overflowY))||this._element.classList.contains(cr)||(e||(this._element.style.overflowY="hidden"),this._element.classList.add(cr),this._queueCallback(function(){n._element.classList.remove(cr),n._queueCallback(function(){n._element.style.overflowY=t},n._dialog)},this._dialog),this._element.focus())}},{key:"_adjustDialog",value:function(){var e,t=this._element.scrollHeight>document.documentElement.clientHeight,n=this._scrollBar.getWidth(),r=0<n;r&&!t&&(e=o()?"paddingLeft":"paddingRight",this._element.style[e]="".concat(n,"px")),!r&&t&&(e=o()?"paddingRight":"paddingLeft",this._element.style[e]="".concat(n,"px"))}},{key:"_resetAdjustments",value:function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}}],[{key:"Default",get:function(){return lr}},{key:"DefaultType",get:function(){return ur}},{key:"NAME",get:function(){return"modal"}},{key:"jQueryInterface",value:function(t,n){return this.each(function(){var e=r.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'.concat(t,'"'));e[t](n)}})}}]),r}(),w=(m.on(document,_t,'[data-bs-toggle="modal"]',function(e){var t=this,n=a(this),e=(["A","AREA"].includes(this.tagName)&&e.preventDefault(),m.one(n,tr,function(e){e.defaultPrevented||m.one(n,er,function(){i(t)&&t.focus()})}),f.findOne(".modal.show"));e&&fr.getInstance(e).hide(),fr.getOrCreateInstance(n).toggle(this)}),he(fr),e(fr),".".concat("bs.offcanvas")),qt=".data-api",Rt="load".concat(w).concat(qt),dr="showing",pr=".offcanvas.show",hr="show".concat(w),mr="shown".concat(w),vr="hide".concat(w),yr="hidePrevented".concat(w),gr="hidden".concat(w),Vt="resize".concat(w),rn="click".concat(w).concat(qt),_r="keydown.dismiss".concat(w),br={backdrop:!0,keyboard:!0,scroll:!1},wr={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"},B=function(){_inherits(r,t);var n=_createSuper(r);function r(e,t){return _classCallCheck(this,r),(e=n.call(this,e,t))._isShown=!1,e._backdrop=e._initializeBackDrop(),e._focustrap=e._initializeFocusTrap(),e._addEventListeners(),e}return _createClass(r,[{key:"toggle",value:function(e){return this._isShown?this.hide():this.show(e)}},{key:"show",value:function(e){var t=this;this._isShown||m.trigger(this._element,hr,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._backdrop.show(),this._config.scroll||(new Fn).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(dr),this._queueCallback(function(){t._config.scroll&&!t._config.backdrop||t._focustrap.activate(),t._element.classList.add("show"),t._element.classList.remove(dr),m.trigger(t._element,mr,{relatedTarget:e})},this._element,!0))}},{key:"hide",value:function(){var e=this;this._isShown&&!m.trigger(this._element,vr).defaultPrevented&&(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add("hiding"),this._backdrop.hide(),this._queueCallback(function(){e._element.classList.remove("show","hiding"),e._element.removeAttribute("aria-modal"),e._element.removeAttribute("role"),e._config.scroll||(new Fn).reset(),m.trigger(e._element,gr)},this._element,!0))}},{key:"dispose",value:function(){this._backdrop.dispose(),this._focustrap.deactivate(),_get(_getPrototypeOf(r.prototype),"dispose",this).call(this)}},{key:"_initializeBackDrop",value:function(){var e=this,t=Boolean(this._config.backdrop);return new zn({className:"offcanvas-backdrop",isVisible:t,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:t?function(){"static"===e._config.backdrop?m.trigger(e._element,yr):e.hide()}:null})}},{key:"_initializeFocusTrap",value:function(){return new Zn({trapElement:this._element})}},{key:"_addEventListeners",value:function(){var t=this;m.on(this._element,_r,function(e){"Escape"===e.key&&(t._config.keyboard?t.hide():m.trigger(t._element,yr))})}}],[{key:"Default",get:function(){return br}},{key:"DefaultType",get:function(){return wr}},{key:"NAME",get:function(){return"offcanvas"}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=r.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError('No method named "'.concat(t,'"'));e[t](this)}})}}]),r}(),kr=(m.on(document,rn,'[data-bs-toggle="offcanvas"]',function(e){var t=this,n=a(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),c(this)||(m.one(n,gr,function(){i(t)&&t.focus()}),(e=f.findOne(pr))&&e!==n&&B.getInstance(e).hide(),B.getOrCreateInstance(n).toggle(this))}),m.on(window,Rt,function(){var e,t=_createForOfIteratorHelper(f.find(pr));try{for(t.s();!(e=t.n()).done;){var n=e.value;B.getOrCreateInstance(n).show()}}catch(e){t.e(e)}finally{t.f()}}),m.on(window,Vt,function(){var e,t=_createForOfIteratorHelper(f.find("[aria-modal][class*=show][class*=offcanvas-]"));try{for(t.s();!(e=t.n()).done;){var n=e.value;"fixed"!==getComputedStyle(n).position&&B.getOrCreateInstance(n).hide()}}catch(e){t.e(e)}finally{t.f()}}),he(B),e(B),new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"])),Cr=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,Sr=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,sn={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]};function Or(e,t,n){if(!e.length)return e;if(n&&"function"==typeof n)return n(e);var r,n=(new window.DOMParser).parseFromString(e,"text/html"),e=(e=[]).concat.apply(e,_toConsumableArray(n.body.querySelectorAll("*"))),o=_createForOfIteratorHelper(e);try{for(o.s();!(r=o.n()).done;){var i,a=r.value,s=a.nodeName.toLowerCase();if(Object.keys(t).includes(s)){var c,l=(i=[]).concat.apply(i,_toConsumableArray(a.attributes)),u=[].concat(t["*"]||[],t[s]||[]),f=_createForOfIteratorHelper(l);try{for(f.s();!(c=f.n()).done;){var d=c.value;!function(e,t){var n=e.nodeName.toLowerCase();return t.includes(n)?!kr.has(n)||Boolean(Cr.test(e.nodeValue)||Sr.test(e.nodeValue)):t.filter(function(e){return e instanceof RegExp}).some(function(e){return e.test(n)})}(d,u)&&a.removeAttribute(d.nodeName)}}catch(e){f.e(e)}finally{f.f()}}else a.remove()}}catch(e){o.e(e)}finally{o.f()}return n.body.innerHTML}var xr={allowList:sn,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},Lr={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},Er={entry:"(string|element|function|null)",selector:"(string|element)"},Tr=function(){_inherits(i,_e);var n=_createSuper(i);function i(e){var t;return _classCallCheck(this,i),(t=n.call(this))._config=t._getConfig(e),t}return _createClass(i,[{key:"getContent",value:function(){var t=this;return Object.values(this._config.content).map(function(e){return t._resolvePossibleFunction(e)}).filter(Boolean)}},{key:"hasContent",value:function(){return 0<this.getContent().length}},{key:"changeContent",value:function(e){return this._checkContent(e),this._config.content=_objectSpread(_objectSpread({},this._config.content),e),this}},{key:"toHtml",value:function(){var e=document.createElement("div");e.innerHTML=this._maybeSanitize(this._config.template);for(var t=0,n=Object.entries(this._config.content);t<n.length;t++){var r=_slicedToArray(n[t],2),o=r[0],r=r[1];this._setContent(e,r,o)}var i,a=e.children[0],s=this._resolvePossibleFunction(this._config.extraClass);return s&&(i=a.classList).add.apply(i,_toConsumableArray(s.split(" "))),a}},{key:"_typeCheckConfig",value:function(e){_get(_getPrototypeOf(i.prototype),"_typeCheckConfig",this).call(this,e),this._checkContent(e.content)}},{key:"_checkContent",value:function(e){for(var t=0,n=Object.entries(e);t<n.length;t++){var r=_slicedToArray(n[t],2),o=r[0],r=r[1];_get(_getPrototypeOf(i.prototype),"_typeCheckConfig",this).call(this,{selector:o,entry:r},Er)}}},{key:"_setContent",value:function(e,t,n){n=f.findOne(n,e);n&&((t=this._resolvePossibleFunction(t))?u(t)?this._putElementInTemplate(s(t),n):this._config.html?n.innerHTML=this._maybeSanitize(t):n.textContent=t:n.remove())}},{key:"_maybeSanitize",value:function(e){return this._config.sanitize?Or(e,this._config.allowList,this._config.sanitizeFn):e}},{key:"_resolvePossibleFunction",value:function(e){return"function"==typeof e?e(this):e}},{key:"_putElementInTemplate",value:function(e,t){this._config.html?(t.innerHTML="",t.append(e)):t.textContent=e.textContent}}],[{key:"Default",get:function(){return xr}},{key:"DefaultType",get:function(){return Lr}},{key:"NAME",get:function(){return"TemplateFactory"}}]),i}(),Ar=new Set(["sanitize","allowList","sanitizeFn"]),jr="fade",Pr="show",Ir=".".concat("modal"),Br="hide.bs.modal",Dr="hover",Nr="focus",qr={AUTO:"auto",TOP:"top",RIGHT:o()?"left":"right",BOTTOM:"bottom",LEFT:o()?"right":"left"},Mr={allowList:sn,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,0],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},Fr={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"},Hr=function(){_inherits(r,t);var n=_createSuper(r);function r(e,t){if(_classCallCheck(this,r),void 0===yn)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");return(e=n.call(this,e,t))._isEnabled=!0,e._timeout=0,e._isHovered=null,e._activeTrigger={},e._popper=null,e._templateFactory=null,e._newContent=null,e.tip=null,e._setListeners(),e._config.selector||e._fixTitle(),e}return _createClass(r,[{key:"enable",value:function(){this._isEnabled=!0}},{key:"disable",value:function(){this._isEnabled=!1}},{key:"toggleEnabled",value:function(){this._isEnabled=!this._isEnabled}},{key:"toggle",value:function(){this._isEnabled&&(this._activeTrigger.click=!this._activeTrigger.click,this._isShown()?this._leave():this._enter())}},{key:"dispose",value:function(){clearTimeout(this._timeout),m.off(this._element.closest(Ir),Br,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),_get(_getPrototypeOf(r.prototype),"dispose",this).call(this)}},{key:"show",value:function(){var e=this;if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(this._isWithContent()&&this._isEnabled){var t=m.trigger(this._element,this.constructor.eventName("show")),n=(M(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(!t.defaultPrevented&&n){this._disposePopper();t=this._getTipElement(),n=(this._element.setAttribute("aria-describedby",t.getAttribute("id")),this._config.container);if(this._element.ownerDocument.documentElement.contains(this.tip)||(n.append(t),m.trigger(this._element,this.constructor.eventName("inserted"))),this._popper=this._createPopper(t),t.classList.add(Pr),"ontouchstart"in document.documentElement){var r,o=_createForOfIteratorHelper((n=[]).concat.apply(n,_toConsumableArray(document.body.children)));try{for(o.s();!(r=o.n()).done;){var i=r.value;m.on(i,"mouseover",F)}}catch(e){o.e(e)}finally{o.f()}}this._queueCallback(function(){m.trigger(e._element,e.constructor.eventName("shown")),!1===e._isHovered&&e._leave(),e._isHovered=!1},this.tip,this._isAnimated())}}}},{key:"hide",value:function(){var e=this;if(this._isShown()){var t=m.trigger(this._element,this.constructor.eventName("hide"));if(!t.defaultPrevented){if(this._getTipElement().classList.remove(Pr),"ontouchstart"in document.documentElement){var n,r=_createForOfIteratorHelper((t=[]).concat.apply(t,_toConsumableArray(document.body.children)));try{for(r.s();!(n=r.n()).done;){var o=n.value;m.off(o,"mouseover",F)}}catch(e){r.e(e)}finally{r.f()}}this._activeTrigger.click=!1,this._activeTrigger[Nr]=!1,this._activeTrigger[Dr]=!1,this._isHovered=null;this._queueCallback(function(){e._isWithActiveTrigger()||(e._isHovered||e._disposePopper(),e._element.removeAttribute("aria-describedby"),m.trigger(e._element,e.constructor.eventName("hidden")))},this.tip,this._isAnimated())}}}},{key:"update",value:function(){this._popper&&this._popper.update()}},{key:"_isWithContent",value:function(){return Boolean(this._getTitle())}},{key:"_getTipElement",value:function(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}},{key:"_createTipElement",value:function(e){e=this._getTemplateFactory(e).toHtml();if(!e)return null;e.classList.remove(jr,Pr),e.classList.add("bs-".concat(this.constructor.NAME,"-auto"));var t=function(e){for(;e+=Math.floor(1e6*Math.random()),document.getElementById(e););return e}(this.constructor.NAME).toString();return e.setAttribute("id",t),this._isAnimated()&&e.classList.add(jr),e}},{key:"setContent",value:function(e){this._newContent=e,this._isShown()&&(this._disposePopper(),this.show())}},{key:"_getTemplateFactory",value:function(e){return this._templateFactory?this._templateFactory.changeContent(e):this._templateFactory=new Tr(_objectSpread(_objectSpread({},this._config),{},{content:e,extraClass:this._resolvePossibleFunction(this._config.customClass)})),this._templateFactory}},{key:"_getContentForTemplate",value:function(){return _defineProperty({},".tooltip-inner",this._getTitle())}},{key:"_getTitle",value:function(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}},{key:"_initializeOnDelegatedTarget",value:function(e){return this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}},{key:"_isAnimated",value:function(){return this._config.animation||this.tip&&this.tip.classList.contains(jr)}},{key:"_isShown",value:function(){return this.tip&&this.tip.classList.contains(Pr)}},{key:"_createPopper",value:function(e){var t="function"==typeof this._config.placement?this._config.placement.call(this,e,this._element):this._config.placement,t=qr[t.toUpperCase()];return vn(this._element,e,this._getPopperConfig(t))}},{key:"_getOffset",value:function(){var t=this,n=this._config.offset;return"string"==typeof n?n.split(",").map(function(e){return Number.parseInt(e,10)}):"function"==typeof n?function(e){return n(e,t._element)}:n}},{key:"_resolvePossibleFunction",value:function(e){return"function"==typeof e?e.call(this._element):e}},{key:"_getPopperConfig",value:function(e){var t=this,e={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:".".concat(this.constructor.NAME,"-arrow")}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:function(e){t._getTipElement().setAttribute("data-popper-placement",e.state.placement)}}]};return _objectSpread(_objectSpread({},e),"function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig)}},{key:"_setListeners",value:function(){var e,n=this,t=this._config.trigger.split(" "),r=_createForOfIteratorHelper(t);try{for(r.s();!(e=r.n()).done;){var o,i,a=e.value;"click"===a?m.on(this._element,this.constructor.eventName("click"),this._config.selector,function(e){n._initializeOnDelegatedTarget(e).toggle()}):"manual"!==a&&(o=a===Dr?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),i=a===Dr?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout"),m.on(this._element,o,this._config.selector,function(e){var t=n._initializeOnDelegatedTarget(e);t._activeTrigger["focusin"===e.type?Nr:Dr]=!0,t._enter()}),m.on(this._element,i,this._config.selector,function(e){var t=n._initializeOnDelegatedTarget(e);t._activeTrigger["focusout"===e.type?Nr:Dr]=t._element.contains(e.relatedTarget),t._leave()}))}}catch(e){r.e(e)}finally{r.f()}this._hideModalHandler=function(){n._element&&n.hide()},m.on(this._element.closest(Ir),Br,this._hideModalHandler)}},{key:"_fixTitle",value:function(){var e=this._element.getAttribute("title");e&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",e),this._element.setAttribute("data-bs-original-title",e),this._element.removeAttribute("title"))}},{key:"_enter",value:function(){var e=this;this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout(function(){e._isHovered&&e.show()},this._config.delay.show))}},{key:"_leave",value:function(){var e=this;this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout(function(){e._isHovered||e.hide()},this._config.delay.hide))}},{key:"_setTimeout",value:function(e,t){clearTimeout(this._timeout),this._timeout=setTimeout(e,t)}},{key:"_isWithActiveTrigger",value:function(){return Object.values(this._activeTrigger).includes(!0)}},{key:"_getConfig",value:function(e){for(var t=ye(this._element),n=0,r=Object.keys(t);n<r.length;n++){var o=r[n];Ar.has(o)&&delete t[o]}return e=_objectSpread(_objectSpread({},t),"object"===_typeof(e)&&e?e:{}),e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}},{key:"_configAfterMerge",value:function(e){return e.container=!1===e.container?document.body:s(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),e}},{key:"_getDelegateConfig",value:function(){var e,t={};for(e in this._config)this.constructor.Default[e]!==this._config[e]&&(t[e]=this._config[e]);return t.selector=!1,t.trigger="manual",t}},{key:"_disposePopper",value:function(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}}],[{key:"Default",get:function(){return Mr}},{key:"DefaultType",get:function(){return Fr}},{key:"NAME",get:function(){return"tooltip"}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=r.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'.concat(t,'"'));e[t]()}})}}]),r}(),Rr=(e(Hr),_objectSpread(_objectSpread({},Hr.Default),{},{content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"})),Wr=_objectSpread(_objectSpread({},Hr.DefaultType),{},{content:"(null|string|element|function)"}),cn=function(){_inherits(n,Hr);var e=_createSuper(n);function n(){return _classCallCheck(this,n),e.apply(this,arguments)}return _createClass(n,[{key:"_isWithContent",value:function(){return this._getTitle()||this._getContent()}},{key:"_getContentForTemplate",value:function(){var e={};return _defineProperty(e,".popover-header",this._getTitle()),_defineProperty(e,".popover-body",this._getContent()),e}},{key:"_getContent",value:function(){return this._resolvePossibleFunction(this._config.content)}}],[{key:"Default",get:function(){return Rr}},{key:"DefaultType",get:function(){return Wr}},{key:"NAME",get:function(){return"popover"}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=n.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'.concat(t,'"'));e[t]()}})}}]),n}(),ln=(e(cn),".".concat("bs.scrollspy")),Vr="activate".concat(ln),zr="click".concat(ln),un="load".concat(ln).concat(".data-api"),Gr="active",Kr="[href]",v=".nav-link",Yr="".concat(v,", ").concat(".nav-item"," > ").concat(v,", ").concat(".list-group-item"),Ur={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null,threshold:[.1,.5,1]},Xr={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element",threshold:"array"},Qr=function(){_inherits(r,t);var n=_createSuper(r);function r(e,t){return _classCallCheck(this,r),(e=n.call(this,e,t))._targetLinks=new Map,e._observableSections=new Map,e._rootElement="visible"===getComputedStyle(e._element).overflowY?null:e._element,e._activeTarget=null,e._observer=null,e._previousScrollData={visibleEntryTop:0,parentScrollTop:0},e.refresh(),e}return _createClass(r,[{key:"refresh",value:function(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();var e,t=_createForOfIteratorHelper(this._observableSections.values());try{for(t.s();!(e=t.n()).done;){var n=e.value;this._observer.observe(n)}}catch(e){t.e(e)}finally{t.f()}}},{key:"dispose",value:function(){this._observer.disconnect(),_get(_getPrototypeOf(r.prototype),"dispose",this).call(this)}},{key:"_configAfterMerge",value:function(e){return e.target=s(e.target)||document.body,e.rootMargin=e.offset?"".concat(e.offset,"px 0px -30%"):e.rootMargin,"string"==typeof e.threshold&&(e.threshold=e.threshold.split(",").map(function(e){return Number.parseFloat(e)})),e}},{key:"_maybeEnableSmoothScroll",value:function(){var n=this;this._config.smoothScroll&&(m.off(this._config.target,zr),m.on(this._config.target,zr,Kr,function(e){var t=n._observableSections.get(e.target.hash);t&&(e.preventDefault(),e=n._rootElement||window,t=t.offsetTop-n._element.offsetTop,e.scrollTo?e.scrollTo({top:t,behavior:"smooth"}):e.scrollTop=t)}))}},{key:"_getNewObserver",value:function(){var t=this,e={root:this._rootElement,threshold:this._config.threshold,rootMargin:this._config.rootMargin};return new IntersectionObserver(function(e){return t._observerCallback(e)},e)}},{key:"_observerCallback",value:function(e){function t(e){r._previousScrollData.visibleEntryTop=e.target.offsetTop,r._process(o(e))}var n,r=this,o=function(e){return r._targetLinks.get("#".concat(e.target.id))},i=(this._rootElement||document.documentElement).scrollTop,a=i>=this._previousScrollData.parentScrollTop,s=(this._previousScrollData.parentScrollTop=i,_createForOfIteratorHelper(e));try{for(s.s();!(n=s.n()).done;){var c=n.value;if(c.isIntersecting){var l=c.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(a&&l){if(t(c),i)continue;return}a||l||t(c)}else this._activeTarget=null,this._clearActiveClass(o(c))}}catch(e){s.e(e)}finally{s.f()}}},{key:"_initializeTargetsAndObservables",value:function(){this._targetLinks=new Map,this._observableSections=new Map;var e,t=f.find(Kr,this._config.target),n=_createForOfIteratorHelper(t);try{for(n.s();!(e=n.n()).done;){var r,o=e.value;o.hash&&!c(o)&&(r=f.findOne(o.hash,this._element),i(r))&&(this._targetLinks.set(o.hash,o),this._observableSections.set(o.hash,r))}}catch(e){n.e(e)}finally{n.f()}}},{key:"_process",value:function(e){this._activeTarget!==e&&(this._clearActiveClass(this._config.target),(this._activeTarget=e).classList.add(Gr),this._activateParents(e),m.trigger(this._element,Vr,{relatedTarget:e}))}},{key:"_activateParents",value:function(e){if(e.classList.contains("dropdown-item"))f.findOne(".dropdown-toggle",e.closest(".dropdown")).classList.add(Gr);else{var t,n=_createForOfIteratorHelper(f.parents(e,".nav, .list-group"));try{for(n.s();!(t=n.n()).done;){var r,o=t.value,i=_createForOfIteratorHelper(f.prev(o,Yr));try{for(i.s();!(r=i.n()).done;)r.value.classList.add(Gr)}catch(e){i.e(e)}finally{i.f()}}}catch(e){n.e(e)}finally{n.f()}}}},{key:"_clearActiveClass",value:function(e){e.classList.remove(Gr);var t,e=f.find("".concat(Kr,".").concat(Gr),e),n=_createForOfIteratorHelper(e);try{for(n.s();!(t=n.n()).done;)t.value.classList.remove(Gr)}catch(e){n.e(e)}finally{n.f()}}}],[{key:"Default",get:function(){return Ur}},{key:"DefaultType",get:function(){return Xr}},{key:"NAME",get:function(){return"scrollspy"}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=r.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError('No method named "'.concat(t,'"'));e[t]()}})}}]),r}(),p=(m.on(window,un,function(){var e,t=_createForOfIteratorHelper(f.find('[data-bs-spy="scroll"]'));try{for(t.s();!(e=t.n()).done;){var n=e.value;Qr.getOrCreateInstance(n)}}catch(e){t.e(e)}finally{t.f()}}),e(Qr),".".concat("bs.tab")),Zr="hide".concat(p),$r="hidden".concat(p),Jr="show".concat(p),eo="shown".concat(p),yt="click".concat(p),to="keydown".concat(p),gt="load".concat(p),no="ArrowRight",ro="ArrowDown",D="active",oo="show",n=":not(.dropdown-toggle)",_t=".nav-link".concat(n,", .list-group-item").concat(n,', [role="tab"]').concat(n),qt='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',io="".concat(_t,", ").concat(qt),ao=".".concat(D,'[data-bs-toggle="tab"], .').concat(D,'[data-bs-toggle="pill"], .').concat(D,'[data-bs-toggle="list"]'),so=function(){_inherits(r,t);var n=_createSuper(r);function r(e){var t;return _classCallCheck(this,r),(t=n.call(this,e))._parent=t._element.closest('.list-group, .nav, [role="tablist"]'),t._parent?(t._setInitialAttributes(t._parent,t._getChildren()),m.on(t._element,to,function(e){return t._keydown(e)}),t):_possibleConstructorReturn(t)}return _createClass(r,[{key:"show",value:function(){var e,t,n=this._element;this._elemIsActive(n)||(t=(e=this._getActiveElem())?m.trigger(e,Zr,{relatedTarget:n}):null,m.trigger(n,Jr,{relatedTarget:e}).defaultPrevented)||t&&t.defaultPrevented||(this._deactivate(e,n),this._activate(n,e))}},{key:"_activate",value:function(e,t){var n=this;e&&(e.classList.add(D),this._activate(a(e)),this._queueCallback(function(){"tab"!==e.getAttribute("role")?e.classList.add(oo):(e.removeAttribute("tabindex"),e.setAttribute("aria-selected",!0),n._toggleDropDown(e,!0),m.trigger(e,eo,{relatedTarget:t}))},e,e.classList.contains("fade")))}},{key:"_deactivate",value:function(e,t){var n=this;e&&(e.classList.remove(D),e.blur(),this._deactivate(a(e)),this._queueCallback(function(){"tab"!==e.getAttribute("role")?e.classList.remove(oo):(e.setAttribute("aria-selected",!1),e.setAttribute("tabindex","-1"),n._toggleDropDown(e,!1),m.trigger(e,$r,{relatedTarget:t}))},e,e.classList.contains("fade")))}},{key:"_keydown",value:function(e){var t;["ArrowLeft",no,"ArrowUp",ro].includes(e.key)&&(e.stopPropagation(),e.preventDefault(),t=[no,ro].includes(e.key),e=V(this._getChildren().filter(function(e){return!c(e)}),e.target,t,!0))&&(e.focus({preventScroll:!0}),r.getOrCreateInstance(e).show())}},{key:"_getChildren",value:function(){return f.find(io,this._parent)}},{key:"_getActiveElem",value:function(){var t=this;return this._getChildren().find(function(e){return t._elemIsActive(e)})||null}},{key:"_setInitialAttributes",value:function(e,t){this._setAttributeIfNotExists(e,"role","tablist");var n,r=_createForOfIteratorHelper(t);try{for(r.s();!(n=r.n()).done;){var o=n.value;this._setInitialAttributesOnChild(o)}}catch(e){r.e(e)}finally{r.f()}}},{key:"_setInitialAttributesOnChild",value:function(e){e=this._getInnerElement(e);var t=this._elemIsActive(e),n=this._getOuterElement(e);e.setAttribute("aria-selected",t),n!==e&&this._setAttributeIfNotExists(n,"role","presentation"),t||e.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(e,"role","tab"),this._setInitialAttributesOnTargetPanel(e)}},{key:"_setInitialAttributesOnTargetPanel",value:function(e){var t=a(e);t&&(this._setAttributeIfNotExists(t,"role","tabpanel"),e.id)&&this._setAttributeIfNotExists(t,"aria-labelledby","#".concat(e.id))}},{key:"_toggleDropDown",value:function(e,n){var r=this._getOuterElement(e);r.classList.contains("dropdown")&&((e=function(e,t){e=f.findOne(e,r);e&&e.classList.toggle(t,n)})(".dropdown-toggle",D),e(".dropdown-menu",oo),r.setAttribute("aria-expanded",n))}},{key:"_setAttributeIfNotExists",value:function(e,t,n){e.hasAttribute(t)||e.setAttribute(t,n)}},{key:"_elemIsActive",value:function(e){return e.classList.contains(D)}},{key:"_getInnerElement",value:function(e){return e.matches(io)?e:f.findOne(io,e)}},{key:"_getOuterElement",value:function(e){return e.closest(".nav-item, .list-group-item")||e}}],[{key:"NAME",get:function(){return"tab"}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=r.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError('No method named "'.concat(t,'"'));e[t]()}})}}]),r}(),w=(m.on(document,yt,qt,function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),c(this)||so.getOrCreateInstance(this).show()}),m.on(window,gt,function(){var e,t=_createForOfIteratorHelper(f.find(ao));try{for(t.s();!(e=t.n()).done;){var n=e.value;so.getOrCreateInstance(n)}}catch(e){t.e(e)}finally{t.f()}}),e(so),".".concat("bs.toast")),co="mouseover".concat(w),lo="mouseout".concat(w),uo="focusin".concat(w),fo="focusout".concat(w),po="hide".concat(w),ho="hidden".concat(w),mo="show".concat(w),vo="shown".concat(w),yo="show",go="showing",_o={animation:"boolean",autohide:"boolean",delay:"number"},bo={animation:!0,autohide:!0,delay:5e3},rn=function(){_inherits(r,t);var n=_createSuper(r);function r(e,t){return _classCallCheck(this,r),(e=n.call(this,e,t))._timeout=null,e._hasMouseInteraction=!1,e._hasKeyboardInteraction=!1,e._setListeners(),e}return _createClass(r,[{key:"show",value:function(){var e=this;m.trigger(this._element,mo).defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove("hide"),H(this._element),this._element.classList.add(yo,go),this._queueCallback(function(){e._element.classList.remove(go),m.trigger(e._element,vo),e._maybeScheduleHide()},this._element,this._config.animation))}},{key:"hide",value:function(){var e=this;this.isShown()&&!m.trigger(this._element,po).defaultPrevented&&(this._element.classList.add(go),this._queueCallback(function(){e._element.classList.add("hide"),e._element.classList.remove(go,yo),m.trigger(e._element,ho)},this._element,this._config.animation))}},{key:"dispose",value:function(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(yo),_get(_getPrototypeOf(r.prototype),"dispose",this).call(this)}},{key:"isShown",value:function(){return this._element.classList.contains(yo)}},{key:"_maybeScheduleHide",value:function(){var e=this;!this._config.autohide||this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout(function(){e.hide()},this._config.delay))}},{key:"_onInteraction",value:function(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}t?this._clearTimeout():(e=e.relatedTarget,this._element===e||this._element.contains(e)||this._maybeScheduleHide())}},{key:"_setListeners",value:function(){var t=this;m.on(this._element,co,function(e){return t._onInteraction(e,!0)}),m.on(this._element,lo,function(e){return t._onInteraction(e,!1)}),m.on(this._element,uo,function(e){return t._onInteraction(e,!0)}),m.on(this._element,fo,function(e){return t._onInteraction(e,!1)})}},{key:"_clearTimeout",value:function(){clearTimeout(this._timeout),this._timeout=null}}],[{key:"Default",get:function(){return bo}},{key:"DefaultType",get:function(){return _o}},{key:"NAME",get:function(){return"toast"}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=r.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'.concat(t,'"'));e[t](this)}})}}]),r}();return he(rn),e(rn),{Alert:be,Button:Se,Carousel:Xe,Collapse:st,Dropdown:O,Modal:fr,Offcanvas:B,Popover:cn,ScrollSpy:Qr,Tab:so,Toast:rn,Tooltip:Hr}}),function(e){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e(("undefined"!=typeof globalThis?globalThis:self).Popper={})}(function(e){function _(e){var t;return null==e?window:"[object Window]"!==e.toString()?(t=e.ownerDocument)&&t.defaultView||window:e}function m(e){return e instanceof _(e).Element||e instanceof Element}function c(e){return e instanceof _(e).HTMLElement||e instanceof HTMLElement}function i(e){return"undefined"!=typeof ShadowRoot&&(e instanceof _(e).ShadowRoot||e instanceof ShadowRoot)}var x=Math.max,L=Math.min,b=Math.round;function a(){var e=navigator.userAgentData;return null!=e&&e.brands?e.brands.map(function(e){return e.brand+"/"+e.version}).join(" "):navigator.userAgent}function O(){return!/^((?!chrome|android).)*safari/i.test(a())}function f(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!1);var r=e.getBoundingClientRect(),o=1,i=1;t&&c(e)&&(o=0<e.offsetWidth&&b(r.width)/e.offsetWidth||1,i=0<e.offsetHeight&&b(r.height)/e.offsetHeight||1);t=(m(e)?_(e):window).visualViewport,e=!O()&&n,n=(r.left+(e&&t?t.offsetLeft:0))/o,e=(r.top+(e&&t?t.offsetTop:0))/i,t=r.width/o,o=r.height/i;return{width:t,height:o,top:e,right:n+t,bottom:e+o,left:n,x:n,y:e}}function d(e){e=_(e);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function l(e){return e?(e.nodeName||"").toLowerCase():null}function w(e){return((m(e)?e.ownerDocument:e.document)||window.document).documentElement}function p(e){return f(w(e)).left+d(e).scrollLeft}function k(e){return _(e).getComputedStyle(e)}function u(e){var e=k(e),t=e.overflow,n=e.overflowX,e=e.overflowY;return/auto|scroll|overlay|hidden/.test(t+e+n)}function R(e,t,n){void 0===n&&(n=!1);var r=c(t),o=c(t)&&(a=(o=t).getBoundingClientRect(),i=b(a.width)/o.offsetWidth||1,a=b(a.height)/o.offsetHeight||1,1!==i||1!==a),i=w(t),a=f(e,o,n),e={scrollLeft:0,scrollTop:0},s={x:0,y:0};return!r&&n||("body"===l(t)&&!u(i)||(e=(r=t)!==_(r)&&c(r)?{scrollLeft:r.scrollLeft,scrollTop:r.scrollTop}:d(r)),c(t)?((s=f(t,!0)).x+=t.clientLeft,s.y+=t.clientTop):i&&(s.x=p(i))),{x:a.left+e.scrollLeft-s.x,y:a.top+e.scrollTop-s.y,width:a.width,height:a.height}}function W(e){var t=f(e),n=e.offsetWidth,r=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-r)<=1&&(r=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:r}}function s(e){return"html"===l(e)?e:e.assignedSlot||e.parentNode||(i(e)?e.host:null)||w(e)}function v(e,t){void 0===t&&(t=[]);var n=function e(t){return 0<=["html","body","#document"].indexOf(l(t))?t.ownerDocument.body:c(t)&&u(t)?t:e(s(t))}(e),e=n===(null==(e=e.ownerDocument)?void 0:e.body),r=_(n),r=e?[r].concat(r.visualViewport||[],u(n)?n:[]):n,n=t.concat(r);return e?n:n.concat(v(s(r)))}function o(e){return c(e)&&"fixed"!==k(e).position?e.offsetParent:null}function E(e){for(var t,n=_(e),r=o(e);r&&(t=r,0<=["table","td","th"].indexOf(l(t)))&&"static"===k(r).position;)r=o(r);return(!r||"html"!==l(r)&&("body"!==l(r)||"static"!==k(r).position))&&(r||function(e){var t=/firefox/i.test(a()),n=/Trident/i.test(a());if(!n||!c(e)||"fixed"!==k(e).position){var r=s(e);for(i(r)&&(r=r.host);c(r)&&["html","body"].indexOf(l(r))<0;){var o=k(r);if("none"!==o.transform||"none"!==o.perspective||"paint"===o.contain||-1!==["transform","perspective"].indexOf(o.willChange)||t&&"filter"===o.willChange||t&&o.filter&&"none"!==o.filter)return r;r=r.parentNode}}return null}(e))||n}var T="top",A="bottom",j="right",P="left",I="auto",B=[T,A,j,P],D="start",C="end",V="clippingParents",z="viewport",h="popper",G="reference",K=B.reduce(function(e,t){return e.concat([t+"-"+D,t+"-"+C])},[]),Y=[].concat(B,[I]).reduce(function(e,t){return e.concat([t,t+"-"+D,t+"-"+C])},[]),U=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function X(e){var n=new Map,r=new Set,o=[];return e.forEach(function(e){n.set(e.name,e)}),e.forEach(function(e){r.has(e.name)||!function t(e){r.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach(function(e){r.has(e)||(e=n.get(e))&&t(e)}),o.push(e)}(e)}),o}function y(e){for(var t=arguments.length,n=new Array(1<t?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return[].concat(n).reduce(function(e,t){return e.replace(/%s/,t)},e)}var g='Popper: modifier "%s" provided an invalid %s property, expected %s but got %s',Q='Popper: modifier "%s" requires "%s", but "%s" modifier is not available',Z=["name","enabled","phase","fn","effect","requires","options"];function N(e){return e.split("-")[0]}function $(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&i(n)){var r=t;do{if(r&&e.isSameNode(r))return!0}while(r=r.parentNode||r.host)}return!1}function J(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function ee(e,t,n){return t===z?J((o=n,a=_(r=e),s=w(r),a=a.visualViewport,c=s.clientWidth,s=s.clientHeight,u=l=0,a&&(c=a.width,s=a.height,(i=O())||!i&&"fixed"===o)&&(l=a.offsetLeft,u=a.offsetTop),{width:c,height:s,x:l+p(r),y:u})):m(t)?((o=f(i=t,!1,"fixed"===(o=n))).top=o.top+i.clientTop,o.left=o.left+i.clientLeft,o.bottom=o.top+i.clientHeight,o.right=o.left+i.clientWidth,o.width=i.clientWidth,o.height=i.clientHeight,o.x=o.left,o.y=o.top,o):J((a=w(e),c=w(a),s=d(a),l=null==(l=a.ownerDocument)?void 0:l.body,r=x(c.scrollWidth,c.clientWidth,l?l.scrollWidth:0,l?l.clientWidth:0),u=x(c.scrollHeight,c.clientHeight,l?l.scrollHeight:0,l?l.clientHeight:0),a=-s.scrollLeft+p(a),s=-s.scrollTop,"rtl"===k(l||c).direction&&(a+=x(c.clientWidth,l?l.clientWidth:0)-r),{width:r,height:u,x:a,y:s}));var r,o,i,a,s,c,l,u}function te(n,e,t,r){var o,i="clippingParents"===e?(a=v(s(i=n)),m(o=0<=["absolute","fixed"].indexOf(k(i).position)&&c(i)?E(i):i)?a.filter(function(e){return m(e)&&$(e,o)&&"body"!==l(e)}):[]):[].concat(e),a=[].concat(i,[t]),e=a[0],t=a.reduce(function(e,t){t=ee(n,t,r);return e.top=x(t.top,e.top),e.right=L(t.right,e.right),e.bottom=L(t.bottom,e.bottom),e.left=x(t.left,e.left),e},ee(n,e,r));return t.width=t.right-t.left,t.height=t.bottom-t.top,t.x=t.left,t.y=t.top,t}function q(e){return e.split("-")[1]}function ne(e){return 0<=["top","bottom"].indexOf(e)?"x":"y"}function re(e){var t,n=e.reference,r=e.element,e=e.placement,o=e?N(e):null,e=e?q(e):null,i=n.x+n.width/2-r.width/2,a=n.y+n.height/2-r.height/2;switch(o){case T:t={x:i,y:n.y-r.height};break;case A:t={x:i,y:n.y+n.height};break;case j:t={x:n.x+n.width,y:a};break;case P:t={x:n.x-r.width,y:a};break;default:t={x:n.x,y:n.y}}var s=o?ne(o):null;if(null!=s){var c="y"===s?"height":"width";switch(e){case D:t[s]=t[s]-(n[c]/2-r[c]/2);break;case C:t[s]=t[s]+(n[c]/2-r[c]/2)}}return t}function oe(){return{top:0,right:0,bottom:0,left:0}}function ie(e){return Object.assign({},oe(),e)}function ae(n,e){return e.reduce(function(e,t){return e[t]=n,e},{})}function M(e,t){var r,t=t=void 0===t?{}:t,n=t.placement,n=void 0===n?e.placement:n,o=t.strategy,o=void 0===o?e.strategy:o,i=t.boundary,i=void 0===i?V:i,a=t.rootBoundary,a=void 0===a?z:a,s=t.elementContext,s=void 0===s?h:s,c=t.altBoundary,c=void 0!==c&&c,t=t.padding,t=void 0===t?0:t,t=ie("number"!=typeof t?t:ae(t,B)),l=e.rects.popper,c=e.elements[c?s===h?G:h:s],c=te(m(c)?c:c.contextElement||w(e.elements.popper),i,a,o),i=f(e.elements.reference),a=re({reference:i,element:l,strategy:"absolute",placement:n}),o=J(Object.assign({},l,a)),l=s===h?o:i,u={top:c.top-l.top+t.top,bottom:l.bottom-c.bottom+t.bottom,left:c.left-l.left+t.left,right:l.right-c.right+t.right},a=e.modifiersData.offset;return s===h&&a&&(r=a[n],Object.keys(u).forEach(function(e){var t=0<=[j,A].indexOf(e)?1:-1,n=0<=[T,A].indexOf(e)?"y":"x";u[e]+=r[n]*t})),u}var se="Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.",ce={placement:"bottom",modifiers:[],strategy:"absolute"};function le(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some(function(e){return!(e&&"function"==typeof e.getBoundingClientRect)})}function t(e){var e=e=void 0===e?{}:e,t=e.defaultModifiers,p=void 0===t?[]:t,t=e.defaultOptions,h=void 0===t?ce:t;return function(a,s,t){void 0===t&&(t=h);var n,r,c={placement:"bottom",orderedModifiers:[],options:Object.assign({},ce,h),modifiersData:{},elements:{reference:a,popper:s},attributes:{},styles:{}},l=[],u=!1,f={state:c,setOptions:function(e){var n,t,r,o,i,e="function"==typeof e?e(c.options):e,e=(d(),c.options=Object.assign({},h,c.options,e),c.scrollParents={reference:m(a)?v(a):a.contextElement?v(a.contextElement):[],popper:v(s)},e=[].concat(p,c.options.modifiers),t=e.reduce(function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e},{}),e=Object.keys(t).map(function(e){return t[e]}),n=X(e),U.reduce(function(e,t){return e.concat(n.filter(function(e){return e.phase===t}))},[])),e=(c.orderedModifiers=e.filter(function(e){return e.enabled}),e=[].concat(e,c.options.modifiers),o=function(e){return e.name},i=new Set,e.filter(function(e){e=o(e);if(!i.has(e))return i.add(e),!0})),e=((r=e).forEach(function(n){[].concat(Object.keys(n),Z).filter(function(e,t,n){return n.indexOf(e)===t}).forEach(function(e){switch(e){case"name":"string"!=typeof n.name&&console.error(y(g,String(n.name),'"name"','"string"','"'+String(n.name)+'"'));break;case"enabled":"boolean"!=typeof n.enabled&&console.error(y(g,n.name,'"enabled"','"boolean"','"'+String(n.enabled)+'"'));break;case"phase":U.indexOf(n.phase)<0&&console.error(y(g,n.name,'"phase"',"either "+U.join(", "),'"'+String(n.phase)+'"'));break;case"fn":"function"!=typeof n.fn&&console.error(y(g,n.name,'"fn"','"function"','"'+String(n.fn)+'"'));break;case"effect":null!=n.effect&&"function"!=typeof n.effect&&console.error(y(g,n.name,'"effect"','"function"','"'+String(n.fn)+'"'));break;case"requires":null==n.requires||Array.isArray(n.requires)||console.error(y(g,n.name,'"requires"','"array"','"'+String(n.requires)+'"'));break;case"requiresIfExists":Array.isArray(n.requiresIfExists)||console.error(y(g,n.name,'"requiresIfExists"','"array"','"'+String(n.requiresIfExists)+'"'));break;case"options":case"data":break;default:console.error('PopperJS: an invalid property has been provided to the "'+n.name+'" modifier, valid properties are '+Z.map(function(e){return'"'+e+'"'}).join(", ")+'; but "'+e+'" was provided.')}n.requires&&n.requires.forEach(function(t){null==r.find(function(e){return e.name===t})&&console.error(y(Q,String(n.name),t,t))})})}),N(c.options.placement)!==I||c.orderedModifiers.find(function(e){return"flip"===e.name})||console.error(['Popper: "auto" placements require the "flip" modifier be',"present and enabled to work."].join(" ")),k(s));return[e.marginTop,e.marginRight,e.marginBottom,e.marginLeft].some(function(e){return parseFloat(e)})&&console.warn(['Popper: CSS "margin" styles cannot be used to apply padding',"between the popper and its reference element or boundary.","To replicate margin, use the `offset` modifier, as well as","the `padding` option in the `preventOverflow` and `flip`","modifiers."].join(" ")),c.orderedModifiers.forEach(function(e){var t=e.name,n=e.options,e=e.effect;"function"==typeof e&&(e=e({state:c,name:t,instance:f,options:void 0===n?{}:n}),l.push(e||function(){}))}),f.update()},forceUpdate:function(){if(!u){var e=c.elements,t=e.reference,e=e.popper;if(le(t,e)){c.rects={reference:R(t,E(e),"fixed"===c.options.strategy),popper:W(e)},c.reset=!1,c.placement=c.options.placement,c.orderedModifiers.forEach(function(e){return c.modifiersData[e.name]=Object.assign({},e.data)});for(var n,r,o,i=0,a=0;a<c.orderedModifiers.length;a++){if(100<(i+=1)){console.error("Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.");break}!0===c.reset?(c.reset=!1,a=-1):(n=(o=c.orderedModifiers[a]).fn,r=o.options,o=o.name,"function"==typeof n&&(c=n({state:c,options:void 0===r?{}:r,name:o,instance:f})||c))}}else console.error(se)}},update:(n=function(){return new Promise(function(e){f.forceUpdate(),e(c)})},function(){return r=r||new Promise(function(e){Promise.resolve().then(function(){r=void 0,e(n())})})}),destroy:function(){d(),u=!0}};return le(a,s)?f.setOptions(t).then(function(e){!u&&t.onFirstUpdate&&t.onFirstUpdate(e)}):console.error(se),f;function d(){l.forEach(function(e){return e()}),l=[]}}}var S={passive:!0};var n={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,r=(e=e.options).scroll,o=void 0===r||r,i=void 0===(r=e.resize)||r,a=_(t.elements.popper),s=[].concat(t.scrollParents.reference,t.scrollParents.popper);return o&&s.forEach(function(e){e.addEventListener("scroll",n.update,S)}),i&&a.addEventListener("resize",n.update,S),function(){o&&s.forEach(function(e){e.removeEventListener("scroll",n.update,S)}),i&&a.removeEventListener("resize",n.update,S)}},data:{}};var r={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,e=e.name;t.modifiersData[e]=re({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},ue={top:"auto",right:"auto",bottom:"auto",left:"auto"};function fe(e){var t,n,r,o=e.popper,i=e.popperRect,a=e.placement,s=e.variation,c=e.offsets,l=e.position,u=e.gpuAcceleration,f=e.adaptive,d=e.roundOffsets,e=e.isFixed,p=c.x,p=void 0===p?0:p,h=c.y,h=void 0===h?0:h,m="function"==typeof d?d({x:p,y:h}):{x:p,y:h},m=(p=m.x,h=m.y,c.hasOwnProperty("x")),c=c.hasOwnProperty("y"),v=P,y=T,g=window,o=(f&&(n="clientHeight",t="clientWidth",(r=E(o))===_(o)&&"static"!==k(r=w(o)).position&&"absolute"===l&&(n="scrollHeight",t="scrollWidth"),a!==T&&(a!==P&&a!==j||s!==C)||(y=A,h=(h-((e&&r===g&&g.visualViewport?g.visualViewport.height:r[n])-i.height))*(u?1:-1)),a!==P&&(a!==T&&a!==A||s!==C)||(v=j,p=(p-((e&&r===g&&g.visualViewport?g.visualViewport.width:r[t])-i.width))*(u?1:-1))),Object.assign({position:l},f&&ue)),e=!0===d?(a=(n={x:p,y:h}).x,n=n.y,s=window.devicePixelRatio||1,{x:b(a*s)/s||0,y:b(n*s)/s||0}):{x:p,y:h};return p=e.x,h=e.y,u?Object.assign({},o,((r={})[y]=c?"0":"",r[v]=m?"0":"",r.transform=(g.devicePixelRatio||1)<=1?"translate("+p+"px, "+h+"px)":"translate3d("+p+"px, "+h+"px, 0)",r)):Object.assign({},o,((t={})[y]=c?h+"px":"",t[v]=m?p+"px":"",t.transform="",t))}var de={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,e=e.options,n=void 0===(n=e.gpuAcceleration)||n,r=void 0===(r=e.adaptive)||r,e=void 0===(e=e.roundOffsets)||e,o=k(t.elements.popper).transitionProperty||"",n=(r&&["transform","top","right","bottom","left"].some(function(e){return 0<=o.indexOf(e)})&&console.warn(["Popper: Detected CSS transitions on at least one of the following",'CSS properties: "transform", "top", "right", "bottom", "left".',"\n\n",'Disable the "computeStyles" modifier\'s `adaptive` option to allow',"for smooth transitions, or remove these properties from the CSS","transition declaration on the popper element if only transitioning","opacity or background-color for example.","\n\n","We recommend using the popper element as a wrapper around an inner","element that can have any CSS property transitioned for animations."].join(" ")),{placement:N(t.placement),variation:q(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:n,isFixed:"fixed"===t.options.strategy});null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,fe(Object.assign({},n,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:r,roundOffsets:e})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,fe(Object.assign({},n,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:e})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}};var pe={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var o=e.state;Object.keys(o.elements).forEach(function(e){var t=o.styles[e]||{},n=o.attributes[e]||{},r=o.elements[e];c(r)&&l(r)&&(Object.assign(r.style,t),Object.keys(n).forEach(function(e){var t=n[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)}))})},effect:function(e){var r=e.state,o={popper:{position:r.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(r.elements.popper.style,o.popper),r.styles=o,r.elements.arrow&&Object.assign(r.elements.arrow.style,o.arrow),function(){Object.keys(r.elements).forEach(function(e){var t=r.elements[e],n=r.attributes[e]||{},e=Object.keys((r.styles.hasOwnProperty(e)?r.styles:o)[e]).reduce(function(e,t){return e[t]="",e},{});c(t)&&l(t)&&(Object.assign(t.style,e),Object.keys(n).forEach(function(e){t.removeAttribute(e)}))})}},requires:["computeStyles"]};var he={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var a=e.state,t=e.options,e=e.name,s=void 0===(t=t.offset)?[0,0]:t,t=Y.reduce(function(e,t){var n,r,o,i;return e[t]=(t=t,n=a.rects,r=s,o=N(t),i=0<=[P,T].indexOf(o)?-1:1,t=(n="function"==typeof r?r(Object.assign({},n,{placement:t})):r)[0]||0,r=(n[1]||0)*i,0<=[P,j].indexOf(o)?{x:r,y:t}:{x:t,y:r}),e},{}),n=(r=t[a.placement]).x,r=r.y;null!=a.modifiersData.popperOffsets&&(a.modifiersData.popperOffsets.x+=n,a.modifiersData.popperOffsets.y+=r),a.modifiersData[e]=t}},me={left:"right",right:"left",bottom:"top",top:"bottom"};function F(e){return e.replace(/left|right|bottom|top/g,function(e){return me[e]})}var ve={start:"end",end:"start"};function ye(e){return e.replace(/start|end/g,function(e){return ve[e]})}var ge={name:"flip",enabled:!0,phase:"main",fn:function(e){var f=e.state,t=e.options,e=e.name;if(!f.modifiersData[e]._skip){for(var n=t.mainAxis,r=void 0===n||n,n=t.altAxis,o=void 0===n||n,n=t.fallbackPlacements,d=t.padding,p=t.boundary,h=t.rootBoundary,i=t.altBoundary,a=t.flipVariations,m=void 0===a||a,v=t.allowedAutoPlacements,a=f.options.placement,t=N(a),n=n||(t===a||!m?[F(a)]:N(n=a)===I?[]:(t=F(n),[ye(n),t,ye(t)])),s=[a].concat(n).reduce(function(e,t){return e.concat(N(t)===I?(n=f,r=(e=e=void 0===(e={placement:t,boundary:p,rootBoundary:h,padding:d,flipVariations:m,allowedAutoPlacements:v})?{}:e).placement,o=e.boundary,i=e.rootBoundary,a=e.padding,s=e.flipVariations,c=void 0===(e=e.allowedAutoPlacements)?Y:e,l=q(r),e=l?s?K:K.filter(function(e){return q(e)===l}):B,0===(r=e.filter(function(e){return 0<=c.indexOf(e)})).length&&(r=e,console.error(["Popper: The `allowedAutoPlacements` option did not allow any","placements. Ensure the `placement` option matches the variation","of the allowed placements.",'For example, "auto" cannot be used to allow "bottom-start".','Use "auto-start" instead.'].join(" "))),u=r.reduce(function(e,t){return e[t]=M(n,{placement:t,boundary:o,rootBoundary:i,padding:a})[N(t)],e},{}),Object.keys(u).sort(function(e,t){return u[e]-u[t]})):t);var n,r,o,i,a,s,c,l,u},[]),c=f.rects.reference,l=f.rects.popper,u=new Map,y=!0,g=s[0],_=0;_<s.length;_++){var b=s[_],w=N(b),k=q(b)===D,C=0<=[T,A].indexOf(w),S=C?"width":"height",O=M(f,{placement:b,boundary:p,rootBoundary:h,altBoundary:i,padding:d}),C=C?k?j:P:k?A:T,k=(c[S]>l[S]&&(C=F(C)),F(C)),S=[];if(r&&S.push(O[w]<=0),o&&S.push(O[C]<=0,O[k]<=0),S.every(function(e){return e})){g=b,y=!1;break}u.set(b,S)}if(y)for(var x=m?3:1;0<x;x--)if("break"===function(t){var e=s.find(function(e){e=u.get(e);if(e)return e.slice(0,t).every(function(e){return e})});if(e)return g=e,"break"}(x))break;f.placement!==g&&(f.modifiersData[e]._skip=!0,f.placement=g,f.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function H(e,t,n){return x(e,L(t,n))}var _e={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t,n,r,o,i,a,s,c,l,u=e.state,f=e.options,e=e.name,d=void 0===(d=f.mainAxis)||d,p=void 0!==(p=f.altAxis)&&p,h=f.boundary,m=f.rootBoundary,v=f.altBoundary,y=f.padding,g=void 0===(g=f.tether)||g,f=void 0===(f=f.tetherOffset)?0:f,h=M(u,{boundary:h,rootBoundary:m,padding:y,altBoundary:v}),m=N(u.placement),v=!(y=q(u.placement)),_=ne(m),b="x"===_?"y":"x",w=u.modifiersData.popperOffsets,k=u.rects.reference,C=u.rects.popper,f="number"==typeof(f="function"==typeof f?f(Object.assign({},u.rects,{placement:u.placement})):f)?{mainAxis:f,altAxis:f}:Object.assign({mainAxis:0,altAxis:0},f),S=u.modifiersData.offset?u.modifiersData.offset[u.placement]:null,O={x:0,y:0};w&&(d&&(d="y"===_?"height":"width",a=(s=w[_])+h[n="y"===_?T:P],c=s-h[l="y"===_?A:j],t=g?-C[d]/2:0,o=(y===D?k:C)[d],y=y===D?-C[d]:-k[d],i=u.elements.arrow,i=g&&i?W(i):{width:0,height:0},n=(r=u.modifiersData["arrow#persistent"]?u.modifiersData["arrow#persistent"].padding:oe())[n],r=r[l],l=H(0,k[d],i[d]),i=v?k[d]/2-t-l-n-f.mainAxis:o-l-n-f.mainAxis,o=v?-k[d]/2+t+l+r+f.mainAxis:y+l+r+f.mainAxis,v=(n=u.elements.arrow&&E(u.elements.arrow))?"y"===_?n.clientTop||0:n.clientLeft||0:0,y=s+o-(t=null!=(d=null==S?void 0:S[_])?d:0),l=H(g?L(a,s+i-t-v):a,s,g?x(c,y):c),w[_]=l,O[_]=l-s),p&&(r="y"==b?"height":"width",o=(n=w[b])+h["x"===_?T:P],d=n-h["x"===_?A:j],i=-1!==[T,P].indexOf(m),v=null!=(t=null==S?void 0:S[b])?t:0,a=i?o:n-k[r]-C[r]-v+f.altAxis,y=i?n+k[r]+C[r]-v-f.altAxis:d,s=g&&i?(c=H(c=a,n,l=y),l<c?l:c):H(g?a:o,n,g?y:d),w[b]=s,O[b]=s-n),u.modifiersData[e]=O)},requiresIfExists:["offset"]};var be={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n,r,o,i=e.state,a=e.name,e=e.options,s=i.elements.arrow,c=i.modifiersData.popperOffsets,l=ne(u=N(i.placement)),u=0<=[P,j].indexOf(u)?"height":"width";s&&c&&(e=e.padding,n=i,n=ie("number"!=typeof(e="function"==typeof e?e(Object.assign({},n.rects,{placement:n.placement})):e)?e:ae(e,B)),e=W(s),o="y"===l?T:P,r="y"===l?A:j,t=i.rects.reference[u]+i.rects.reference[l]-c[l]-i.rects.popper[u],c=c[l]-i.rects.reference[l],s=(s=E(s))?"y"===l?s.clientHeight||0:s.clientWidth||0:0,o=n[o],n=s-e[u]-n[r],o=H(o,r=s/2-e[u]/2+(t/2-c/2),n),i.modifiersData[a]=((s={})[l]=o,s.centerOffset=o-r,s))},effect:function(e){var t=e.state;null==(e=void 0===(e=e.options.element)?"[data-popper-arrow]":e)||"string"==typeof e&&!(e=t.elements.popper.querySelector(e))||(c(e)||console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).',"To use an SVG arrow, wrap it in an HTMLElement that will be used as","the arrow."].join(" ")),$(t.elements.popper,e)?t.elements.arrow=e:console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper',"element."].join(" ")))},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function we(e,t,n){return{top:e.top-t.height-(n=void 0===n?{x:0,y:0}:n).y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function ke(t){return[T,j,A,P].some(function(e){return 0<=t[e]})}var Ce={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,e=e.name,n=t.rects.reference,r=t.rects.popper,o=t.modifiersData.preventOverflow,i=M(t,{elementContext:"reference"}),a=M(t,{altBoundary:!0}),i=we(i,n),n=we(a,r,o),a=ke(i),r=ke(n);t.modifiersData[e]={referenceClippingOffsets:i,popperEscapeOffsets:n,isReferenceHidden:a,hasPopperEscaped:r},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":a,"data-popper-escaped":r})}},Se=t({defaultModifiers:[n,r,de,pe]}),Oe=[n,r,de,pe,he,ge,_e,be,Ce],xe=t({defaultModifiers:Oe});e.applyStyles=pe,e.arrow=be,e.computeStyles=de,e.createPopper=xe,e.createPopperLite=Se,e.defaultModifiers=Oe,e.detectOverflow=M,e.eventListeners=n,e.flip=ge,e.hide=Ce,e.offset=he,e.popperGenerator=t,e.popperOffsets=r,e.preventOverflow=_e,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
